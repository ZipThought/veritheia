name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for versioning
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Run tests
      run: |
        dotnet test --no-build --configuration Release \
          --verbosity normal \
          --logger "trx;LogFileName=${{ runner.os }}-test-results.trx" \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults
      env:
        # Testcontainers configuration
        TESTCONTAINERS_RYUK_DISABLED: true
        # Disable .NET Aspire telemetry in CI
        DOTNET_ASPIRE_TELEMETRY_OPTOUT: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ runner.os }}
        path: ./TestResults/**/*.trx
        retention-days: 30
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always() && matrix.os == 'ubuntu-latest'
      with:
        name: coverage-report
        path: ./TestResults/**/coverage.cobertura.xml
        retention-days: 30
    
    - name: Publish test report
      uses: dorny/test-reporter@v1
      if: always() && matrix.os == 'ubuntu-latest'
      with:
        name: Test Results (${{ runner.os }})
        path: './TestResults/**/*.trx'
        reporter: dotnet-trx
        fail-on-error: true

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Check formatting
      run: |
        dotnet format --verify-no-changes --verbosity diagnostic
      continue-on-error: true  # Don't fail the build on format issues
    
    - name: Run code analysis
      run: |
        dotnet build --no-restore --configuration Release \
          -p:TreatWarningsAsErrors=true \
          -p:EnforceCodeStyleInBuild=true

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker build -f veritheia.ApiService/Dockerfile . -t veritheia-api:latest
        docker build -f veritheia.Web/Dockerfile . -t veritheia-web:latest
      continue-on-error: true  # Docker builds might not be set up yet

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Build Release
      run: |
        dotnet publish veritheia.ApiService -c Release -o ./publish/api
        dotnet publish veritheia.Web -c Release -o ./publish/web
    
    - name: Create Release Archive
      run: |
        tar -czf veritheia-api.tar.gz -C ./publish/api .
        tar -czf veritheia-web.tar.gz -C ./publish/web .
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          veritheia-api.tar.gz
          veritheia-web.tar.gz
        generate_release_notes: true
        draft: false
        prerelease: false