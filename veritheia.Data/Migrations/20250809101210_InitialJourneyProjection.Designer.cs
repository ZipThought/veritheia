// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using Pgvector;
using Veritheia.Data;

#nullable disable

namespace veritheia.Data.Migrations
{
    [DbContext(typeof(VeritheiaDbContext))]
    [Migration("20250809101210_InitialJourneyProjection")]
    partial class InitialJourneyProjection
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Veritheia.Data.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ScopeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("Veritheia.Data.Entities.DocumentMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("Authors")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, object>>("ExtendedMetadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.ToTable("document_metadata", (string)null);
                });

            modelBuilder.Entity("Veritheia.Data.Entities.Journal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsShareable")
                        .HasColumnType("boolean");

                    b.Property<Guid>("JourneyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("JourneyId");

                    b.ToTable("journals", null, t =>
                        {
                            t.HasCheckConstraint("CK_Journal_Type", "type IN ('Research', 'Method', 'Decision', 'Reflection')");
                        });
                });

            modelBuilder.Entity("Veritheia.Data.Entities.JournalEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("JournalId")
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Significance")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.ToTable("journal_entries", null, t =>
                        {
                            t.HasCheckConstraint("CK_JournalEntry_Significance", "significance IN ('Routine', 'Notable', 'Critical', 'Milestone')");
                        });
                });

            modelBuilder.Entity("Veritheia.Data.Entities.Journey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, object>>("Context")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PersonaId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProcessType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.HasIndex("UserId");

                    b.ToTable("journeys", null, t =>
                        {
                            t.HasCheckConstraint("CK_Journey_State", "state IN ('Active', 'Paused', 'Completed', 'Abandoned')");
                        });
                });

            modelBuilder.Entity("Veritheia.Data.Entities.JourneyDocumentSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<NpgsqlRange<int>?>("ByteRange")
                        .HasColumnType("int4range");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByRule")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatedForQuestion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JourneyId")
                        .HasColumnType("uuid");

                    b.Property<string>("SegmentContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SegmentPurpose")
                        .HasColumnType("text");

                    b.Property<string>("SegmentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SequenceIndex")
                        .HasColumnType("integer");

                    b.Property<Dictionary<string, object>>("StructuralPath")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("JourneyId", "DocumentId", "SequenceIndex")
                        .IsUnique();

                    b.ToTable("journey_document_segments", (string)null);
                });

            modelBuilder.Entity("Veritheia.Data.Entities.JourneyFormation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FormationMarker")
                        .HasColumnType("text");

                    b.Property<string>("FormationReasoning")
                        .HasColumnType("text");

                    b.Property<DateTime>("FormedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Dictionary<string, object>>("FormedFromSegments")
                        .HasColumnType("jsonb");

                    b.Property<Dictionary<string, object>>("FormedThroughQuestions")
                        .HasColumnType("jsonb");

                    b.Property<string>("InsightContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InsightType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("JourneyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("JourneyId");

                    b.ToTable("journey_formations", (string)null);
                });

            modelBuilder.Entity("Veritheia.Data.Entities.JourneyFramework", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Dictionary<string, object>>("FrameworkElements")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("JourneyId")
                        .HasColumnType("uuid");

                    b.Property<string>("JourneyType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Dictionary<string, object>>("ProjectionRules")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("JourneyId")
                        .IsUnique();

                    b.ToTable("journey_frameworks", (string)null);
                });

            modelBuilder.Entity("Veritheia.Data.Entities.JourneySegmentAssessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssessedByModel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AssessmentReasoning")
                        .HasColumnType("text");

                    b.Property<string>("AssessmentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<float?>("ContributionScore")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Dictionary<string, object>>("ReasoningChain")
                        .HasColumnType("jsonb");

                    b.Property<float?>("RelevanceScore")
                        .HasColumnType("real");

                    b.Property<int?>("ResearchQuestionId")
                        .HasColumnType("integer");

                    b.Property<Dictionary<string, object>>("RubricScores")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("SegmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SegmentId");

                    b.ToTable("journey_segment_assessments", (string)null);
                });

            modelBuilder.Entity("Veritheia.Data.Entities.KnowledgeScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("ParentScopeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentScopeId");

                    b.ToTable("knowledge_scopes", null, t =>
                        {
                            t.HasCheckConstraint("CK_KnowledgeScope_Type", "type IN ('Project', 'Topic', 'Subject', 'Custom')");
                        });
                });

            modelBuilder.Entity("Veritheia.Data.Entities.Persona", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, object>>("ConceptualVocabulary")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastEvolved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<object>>("Markers")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<List<object>>("MethodologicalPreferences")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<List<object>>("Patterns")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Domain")
                        .IsUnique();

                    b.ToTable("personas", (string)null);
                });

            modelBuilder.Entity("Veritheia.Data.Entities.ProcessCapability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ProcessType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "ProcessType")
                        .IsUnique();

                    b.ToTable("process_capabilities", (string)null);
                });

            modelBuilder.Entity("Veritheia.Data.Entities.ProcessDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Dictionary<string, object>>("Configuration")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Dictionary<string, object>>("Inputs")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ProcessType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProcessType")
                        .IsUnique();

                    b.ToTable("process_definitions", null, t =>
                        {
                            t.HasCheckConstraint("CK_ProcessDefinition_Category", "category IN ('Methodological', 'Developmental', 'Analytical', 'Compositional', 'Reflective')");

                            t.HasCheckConstraint("CK_ProcessDefinition_Trigger", "trigger_type IN ('Manual', 'UserInitiated')");
                        });
                });

            modelBuilder.Entity("Veritheia.Data.Entities.ProcessExecution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<Dictionary<string, object>>("Inputs")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("JourneyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProcessType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("JourneyId");

                    b.ToTable("process_executions", null, t =>
                        {
                            t.HasCheckConstraint("CK_ProcessExecution_State", "state IN ('Pending', 'Running', 'Completed', 'Failed', 'Cancelled')");
                        });
                });

            modelBuilder.Entity("Veritheia.Data.Entities.ProcessResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Dictionary<string, object>>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExecutionId")
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ProcessType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExecutionId")
                        .IsUnique();

                    b.ToTable("process_results", (string)null);
                });

            modelBuilder.Entity("Veritheia.Data.Entities.SearchIndex", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IndexedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SegmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VectorDimension")
                        .HasColumnType("integer");

                    b.Property<string>("VectorModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("SegmentId", "VectorModel")
                        .IsUnique();

                    b.ToTable("search_indexes", (string)null);
                });

            modelBuilder.Entity("Veritheia.Data.Entities.SearchVector1536", b =>
                {
                    b.Property<Guid>("IndexId")
                        .HasColumnType("uuid");

                    b.Property<Vector>("Embedding")
                        .IsRequired()
                        .HasColumnType("vector(1536)");

                    b.HasKey("IndexId");

                    b.ToTable("search_vectors_1536", (string)null);
                });

            modelBuilder.Entity("Veritheia.Data.Entities.SearchVector384", b =>
                {
                    b.Property<Guid>("IndexId")
                        .HasColumnType("uuid");

                    b.Property<Vector>("Embedding")
                        .IsRequired()
                        .HasColumnType("vector(384)");

                    b.HasKey("IndexId");

                    b.ToTable("search_vectors_384", (string)null);
                });

            modelBuilder.Entity("Veritheia.Data.Entities.SearchVector768", b =>
                {
                    b.Property<Guid>("IndexId")
                        .HasColumnType("uuid");

                    b.Property<Vector>("Embedding")
                        .IsRequired()
                        .HasColumnType("vector(768)");

                    b.HasKey("IndexId");

                    b.ToTable("search_vectors_768", (string)null);
                });

            modelBuilder.Entity("Veritheia.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastActiveAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Veritheia.Data.Entities.Document", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.KnowledgeScope", "Scope")
                        .WithMany("Documents")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.DocumentMetadata", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.Document", "Document")
                        .WithOne("Metadata")
                        .HasForeignKey("Veritheia.Data.Entities.DocumentMetadata", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.Journal", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.Journey", "Journey")
                        .WithMany("Journals")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.JournalEntry", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.Journal", "Journal")
                        .WithMany("Entries")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.Journey", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.Persona", "Persona")
                        .WithMany("Journeys")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Veritheia.Data.Entities.User", "User")
                        .WithMany("Journeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.JourneyDocumentSegment", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.Document", "Document")
                        .WithMany("JourneySegments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Veritheia.Data.Entities.Journey", "Journey")
                        .WithMany("DocumentSegments")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.JourneyFormation", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.Journey", "Journey")
                        .WithMany("Formations")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.JourneyFramework", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.Journey", "Journey")
                        .WithOne("Framework")
                        .HasForeignKey("Veritheia.Data.Entities.JourneyFramework", "JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.JourneySegmentAssessment", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.JourneyDocumentSegment", "Segment")
                        .WithMany("Assessments")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.KnowledgeScope", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.KnowledgeScope", "ParentScope")
                        .WithMany("ChildScopes")
                        .HasForeignKey("ParentScopeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ParentScope");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.Persona", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.User", "User")
                        .WithMany("Personas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.ProcessCapability", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.User", "User")
                        .WithMany("ProcessCapabilities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.ProcessExecution", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.Journey", "Journey")
                        .WithMany("ProcessExecutions")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.ProcessResult", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.ProcessExecution", "Execution")
                        .WithOne("Result")
                        .HasForeignKey("Veritheia.Data.Entities.ProcessResult", "ExecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Execution");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.SearchIndex", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.JourneyDocumentSegment", "Segment")
                        .WithMany("SearchIndexes")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.SearchVector1536", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.SearchIndex", "Index")
                        .WithOne()
                        .HasForeignKey("Veritheia.Data.Entities.SearchVector1536", "IndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Index");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.SearchVector384", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.SearchIndex", "Index")
                        .WithOne()
                        .HasForeignKey("Veritheia.Data.Entities.SearchVector384", "IndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Index");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.SearchVector768", b =>
                {
                    b.HasOne("Veritheia.Data.Entities.SearchIndex", "Index")
                        .WithOne()
                        .HasForeignKey("Veritheia.Data.Entities.SearchVector768", "IndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Index");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.Document", b =>
                {
                    b.Navigation("JourneySegments");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.Journal", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.Journey", b =>
                {
                    b.Navigation("DocumentSegments");

                    b.Navigation("Formations");

                    b.Navigation("Framework");

                    b.Navigation("Journals");

                    b.Navigation("ProcessExecutions");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.JourneyDocumentSegment", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("SearchIndexes");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.KnowledgeScope", b =>
                {
                    b.Navigation("ChildScopes");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.Persona", b =>
                {
                    b.Navigation("Journeys");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.ProcessExecution", b =>
                {
                    b.Navigation("Result");
                });

            modelBuilder.Entity("Veritheia.Data.Entities.User", b =>
                {
                    b.Navigation("Journeys");

                    b.Navigation("Personas");

                    b.Navigation("ProcessCapabilities");
                });
#pragma warning restore 612, 618
        }
    }
}
