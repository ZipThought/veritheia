@page "/personas/create"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Microsoft.AspNetCore.Components.Web
@using veritheia.Web.Services
@using Veritheia.Data.Entities
@using Veritheia.ApiService.Services
@inject NavigationManager Navigation
@inject RenderContextService ContextService
@inject PersonaApiService PersonaService
@inject ILogger<Create> Logger

<PageTitle>Create Persona - Veritheia</PageTitle>

<div class="container-fluid">
    <div class="create-persona">
        <div class="create-persona-header">
            <h1 class="page-title">Create New Persona</h1>
            <button class="btn btn-outline-secondary" @onclick="Cancel">
                <span class="btn-icon">Ã—</span>
                Cancel
            </button>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                <i class="bi bi-exclamation-circle"></i> @errorMessage
            </div>
        }

        <div class="create-persona-form">
            <div class="form-section">
                <h2 class="section-title">Choose a Template (Optional)</h2>
                <p class="text-muted mb-3">Start with a template or create your own from scratch</p>
                
                <div class="template-grid">
                    <div class="template-card @(selectedTemplate == "researcher" ? "selected" : "")" 
                         @onclick="@(() => ApplyTemplate("researcher"))">
                        <div class="template-icon">ðŸ”¬</div>
                        <h4>Researcher</h4>
                        <p>Systematic investigation, evidence-based analysis</p>
                    </div>
                    <div class="template-card @(selectedTemplate == "student" ? "selected" : "")" 
                         @onclick="@(() => ApplyTemplate("student"))">
                        <div class="template-icon">ðŸ“š</div>
                        <h4>Student</h4>
                        <p>Learning-focused, exploratory approach</p>
                    </div>
                    <div class="template-card @(selectedTemplate == "practitioner" ? "selected" : "")" 
                         @onclick="@(() => ApplyTemplate("practitioner"))">
                        <div class="template-icon">ðŸ’¼</div>
                        <h4>Practitioner</h4>
                        <p>Applied knowledge, practical solutions</p>
                    </div>
                    <div class="template-card @(selectedTemplate == "custom" ? "selected" : "")" 
                         @onclick="@(() => ApplyTemplate("custom"))">
                        <div class="template-icon">âœ¨</div>
                        <h4>Custom</h4>
                        <p>Define your own unique perspective</p>
                    </div>
                </div>
            </div>
            
            <div class="form-section">
                <h2 class="section-title">Persona Details</h2>
                
                <div class="form-group">
                    <label for="persona-domain" class="form-label">Domain Name</label>
                    <input id="persona-domain" type="text" class="form-control" @bind="domainName" 
                           placeholder="e.g., Researcher, Analyst, Student, Professional" />
                    <small class="text-muted">A short name that describes your role or perspective</small>
                </div>

                <div class="form-group">
                    <label for="persona-description" class="form-label">Description</label>
                    <textarea id="persona-description" class="form-control" rows="3" @bind="description"
                              placeholder="Describe your approach, expertise, and focus areas"></textarea>
                    <small class="text-muted">How does this persona approach analysis and decision-making?</small>
                </div>
            </div>

            <div class="form-section">
                <h2 class="section-title">Conceptual Vocabulary</h2>
                <p class="text-muted mb-3">Define key terms and concepts this persona uses (optional)</p>
                
                <div class="form-group">
                    <label for="key-terms" class="form-label">Key Terms (comma-separated)</label>
                    <input id="key-terms" type="text" class="form-control" @bind="keyTerms"
                           placeholder="e.g., hypothesis, evidence, methodology, analysis" />
                </div>

                <div class="form-group">
                    <label for="focus-areas" class="form-label">Focus Areas (comma-separated)</label>
                    <input id="focus-areas" type="text" class="form-control" @bind="focusAreas"
                           placeholder="e.g., accuracy, relevance, impact, innovation" />
                </div>
            </div>

            <div class="form-section">
                <h2 class="section-title">Methodological Preferences</h2>
                <p class="text-muted mb-3">How does this persona prefer to work? (optional)</p>
                
                <div class="form-group">
                    <label for="methodology" class="form-label">Describe Your Approach</label>
                    <textarea id="methodology" class="form-control" rows="4" @bind="methodologyPreferences"
                              placeholder="e.g., I prefer systematic analysis with high rigor, focusing on evidence-based conclusions. I value thorough documentation and peer review..."></textarea>
                    <small class="text-muted">Describe how this persona approaches problems, what standards they maintain, and what they prioritize</small>
                </div>
            </div>

            <div class="form-actions">
                <button class="btn btn-primary" @onclick="CreatePersona" disabled="@isCreating">
                    @if (isCreating)
                    {
                        <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                        <span>Creating...</span>
                    }
                    else
                    {
                        <span class="btn-icon">+</span>
                        <span>Create Persona</span>
                    }
                </button>
                <button class="btn btn-outline-secondary" @onclick="Cancel">
                    Cancel
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .create-persona {
        max-width: 800px;
        margin: 0 auto;
    }

    .create-persona-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .page-title {
        font-size: 2rem;
        font-weight: 600;
        color: var(--text-primary);
        margin: 0;
    }

    .create-persona-form {
        background: white;
        border-radius: 8px;
        padding: 2rem;
    }

    .form-section {
        margin-bottom: 2rem;
        padding-bottom: 2rem;
        border-bottom: 1px solid var(--border-color);
    }

    .form-section:last-of-type {
        border-bottom: none;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: var(--text-primary);
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: var(--text-secondary);
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        font-size: 1rem;
    }

    .form-control:focus {
        outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(var(--primary-rgb), 0.1);
    }

    .form-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-start;
        margin-top: 2rem;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.2s ease;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .btn-primary {
        background-color: #0d6efd;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background-color: #0b5ed7;
    }

    .btn-outline-secondary {
        background-color: white;
        color: #6c757d;
        border: 1px solid #dee2e6;
    }

    .btn-outline-secondary:hover {
        background-color: #f8f9fa;
    }

    .btn-icon {
        font-size: 1.25rem;
    }

    .text-muted {
        color: var(--text-muted);
        font-size: 0.875rem;
    }

    .template-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .template-card {
        padding: 1.5rem;
        border: 2px solid var(--border-color);
        border-radius: 8px;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .template-card:hover {
        border-color: var(--primary);
        transform: translateY(-2px);
    }

    .template-card.selected {
        border-color: var(--primary);
        background-color: rgba(var(--primary-rgb), 0.05);
    }

    .template-icon {
        font-size: 2rem;
        margin-bottom: 0.5rem;
    }

    .template-card h4 {
        margin: 0.5rem 0;
        color: var(--text-primary);
    }

    .template-card p {
        margin: 0;
        font-size: 0.875rem;
        color: var(--text-muted);
    }
</style>

@code {
    private string domainName = "";
    private string description = "";
    private string keyTerms = "";
    private string focusAreas = "";
    private string methodologyPreferences = "";
    private string selectedTemplate = ""; // No template selected by default
    
    private bool isCreating = false;
    private string? errorMessage;
    private RenderContext? context;

    protected override void OnInitialized()
    {
        context = ContextService.GetOrCreateContext();
        context.RequireCurrentUser();
    }

    protected override async Task OnParametersSetAsync()
    {
        context = ContextService.GetOrCreateContext();
        context.RequireCurrentUser();
        
        if (context?.CurrentUser == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }
    }

    private async Task CreatePersona()
    {
        if (string.IsNullOrWhiteSpace(domainName))
        {
            errorMessage = "Please enter a domain name for your persona";
            return;
        }

        if (context?.CurrentUser == null)
        {
            errorMessage = "You must be logged in to create a persona";
            return;
        }

        isCreating = true;
        errorMessage = null;

        try
        {
            // Build vocabulary dictionary from user input
            var vocabulary = new Dictionary<string, object>();
            
            if (!string.IsNullOrWhiteSpace(keyTerms))
            {
                vocabulary["key_terms"] = keyTerms.Split(',', StringSplitOptions.RemoveEmptyEntries)
                    .Select(t => t.Trim())
                    .ToArray();
            }
            
            if (!string.IsNullOrWhiteSpace(focusAreas))
            {
                vocabulary["assessment_focus"] = focusAreas.Split(',', StringSplitOptions.RemoveEmptyEntries)
                    .Select(t => t.Trim())
                    .ToArray();
            }

            if (!string.IsNullOrWhiteSpace(description))
            {
                vocabulary["description"] = description;
            }

            if (!string.IsNullOrWhiteSpace(methodologyPreferences))
            {
                vocabulary["methodology"] = methodologyPreferences;
            }

            // Create the persona
            var persona = await PersonaService.CreatePersonaAsync(
                context.CurrentUser.Id,
                domainName,
                vocabulary.Any() ? vocabulary : null);

            Logger.LogInformation("Created persona {PersonaId} for user {UserId}", persona.Id, context.CurrentUser.Id);

            // Navigate back to journey creation or dashboard
            Navigation.NavigateTo("/journeys/create");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to create persona");
            
            // Check for duplicate domain name error
            if (ex.Message.Contains("duplicate key") || ex.InnerException?.Message.Contains("IX_personas_UserId_Domain") == true)
            {
                errorMessage = $"You already have a persona named '{domainName}'. Please choose a different name.";
            }
            else
            {
                errorMessage = $"Failed to create persona: {ex.Message}";
            }
            
            isCreating = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/journeys/create");
    }

    private void ApplyTemplate(string template)
    {
        selectedTemplate = template;
        
        switch (template)
        {
            case "researcher":
                domainName = "Researcher";
                description = "I approach problems through systematic investigation and evidence-based analysis. My focus is on rigorous methodology and peer-reviewed insights.";
                keyTerms = "hypothesis, evidence, methodology, analysis, validation, peer-review";
                focusAreas = "accuracy, reproducibility, statistical significance, systematic review";
                methodologyPreferences = "I follow systematic research protocols with emphasis on reproducibility and validation. I prioritize evidence quality over quantity, and maintain strict documentation standards. My approach involves hypothesis formation, controlled investigation, and peer review.";
                break;
                
            case "student":
                domainName = "Student";
                description = "I'm focused on learning and understanding, approaching topics with curiosity and openness to new concepts.";
                keyTerms = "understanding, comprehension, concepts, learning, exploration, synthesis";
                focusAreas = "clarity, relevance, difficulty level, practical application";
                methodologyPreferences = "I prefer exploratory learning with progressive depth. I value clear explanations and practical examples. My approach involves asking questions, synthesizing information from multiple sources, and connecting new knowledge to existing understanding.";
                break;
                
            case "practitioner":
                domainName = "Practitioner";
                description = "I focus on practical application and real-world implementation, balancing theoretical knowledge with practical constraints.";
                keyTerms = "implementation, feasibility, best-practices, efficiency, outcomes, ROI";
                focusAreas = "practicality, scalability, cost-effectiveness, time-to-value";
                methodologyPreferences = "I prioritize actionable insights and practical solutions. My approach balances ideal solutions with real-world constraints. I focus on what works in practice, considering implementation challenges and measurable outcomes.";
                break;
                
            case "custom":
                domainName = "";
                description = "";
                keyTerms = "";
                focusAreas = "";
                methodologyPreferences = "";
                break;
        }
    }
}