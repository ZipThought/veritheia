@page "/journeys/{journeyId:guid}/results"
@using veritheia.Web.Services
@using Veritheia.Data.DTOs
@using Veritheia.Common.Models
@using System.Text.Json
@inject JourneyApiService JourneyService
@inject AuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Screening Results - Veritheia</PageTitle>

<div class="results-page">
    @if (_loading)
    {
        <div class="loading">
            <div class="loading-spinner"></div>
            <p>Loading results...</p>
        </div>
    }
    else if (_error != null)
    {
        <div class="error-state">
            <h3>Error</h3>
            <p>@_error</p>
            <button class="btn btn-primary" @onclick="LoadResults">Retry</button>
        </div>
    }
    else if (_journey != null)
    {
        <div class="results-header">
            <h1>ðŸ“Š Systematic Screening Results</h1>
            <p>Journey: <strong>@_journey.Purpose</strong></p>
        </div>

        <div class="results-summary">
            <div class="summary-cards">
                <div class="summary-card">
                    <div class="card-number">@_results.Count</div>
                    <div class="card-label">Total Papers</div>
                </div>
                <div class="summary-card highlight">
                    <div class="card-number">@_mustReadCount</div>
                    <div class="card-label">Must-Read Papers</div>
                </div>
                <div class="summary-card">
                    <div class="card-number">@(_mustReadCount > 0 ? Math.Round((double)_mustReadCount / _results.Count * 100, 1) : 0)%</div>
                    <div class="card-label">Must-Read Rate</div>
                </div>
                <div class="summary-card">
                    <div class="card-number">@_researchQuestions.Count</div>
                    <div class="card-label">Research Questions</div>
                </div>
            </div>

            <div class="results-actions">
                <button class="btn btn-primary" @onclick="ExportToCsv">
                    ðŸ“¥ Export to CSV
                </button>
                <button class="btn btn-outline-primary" @onclick="StartNewAnalysis">
                    ðŸ”„ Start New Analysis
                </button>
            </div>
        </div>

        <div class="results-filters">
            <div class="filter-group">
                <label>Filter by:</label>
                <select value="@_currentFilter" @onchange="OnFilterChange" class="form-select">
                    <option value="all">All Papers (@_results.Count)</option>
                    <option value="must-read">Must-Read Only (@_mustReadCount)</option>
                    <option value="relevant">Relevant Only (@_relevantCount)</option>
                    <option value="contributing">Contributing Only (@_contributingCount)</option>
                </select>
            </div>

            <div class="filter-group">
                <label>Sort by:</label>
                <select value="@_sortBy" @onchange="OnSortChange" class="form-select">
                    <option value="relevance">Relevance Score (High to Low)</option>
                    <option value="contribution">Contribution Score (High to Low)</option>
                    <option value="title">Title (A-Z)</option>
                    <option value="year">Year (Newest First)</option>
                    <option value="authors">Authors (A-Z)</option>
                </select>
            </div>

            @if (_researchQuestions.Count > 1)
            {
                <div class="filter-group">
                    <label>Research Question:</label>
                    <select value="@_selectedQuestionFilter" @onchange="OnQuestionFilterChange" class="form-select">
                        <option value="-1">All Questions</option>
                        @for (int i = 0; i < _researchQuestions.Count; i++)
                        {
                            <option value="@i">RQ@(i + 1): @GetTruncatedText(_researchQuestions[i], 30)</option>
                        }
                    </select>
                </div>
            }

            <div class="threshold-controls">
                <label>Score Thresholds:</label>
                <div class="threshold-sliders">
                    <div class="threshold-item">
                        <label>Relevance â‰¥ @_relevanceThreshold.ToString("F1")</label>
                        <input type="range" min="0" max="1" step="0.1" @bind="_relevanceThreshold" @oninput="ApplyThresholdFilter" class="threshold-slider" />
                    </div>
                    <div class="threshold-item">
                        <label>Contribution â‰¥ @_contributionThreshold.ToString("F1")</label>
                        <input type="range" min="0" max="1" step="0.1" @bind="_contributionThreshold" @oninput="ApplyThresholdFilter" class="threshold-slider" />
                    </div>
                </div>
            </div>
        </div>

        <div class="results-table-container">
            <table class="results-table">
                <thead>
                    <tr>
                        <th class="col-select">
                            <input type="checkbox" @onchange="ToggleSelectAll" />
                        </th>
                        <th class="col-title">Title</th>
                        <th class="col-authors">Authors</th>
                        <th class="col-year">Year</th>
                        <th class="col-venue">Venue</th>
                        @for (int i = 0; i < _researchQuestions.Count; i++)
                        {
                            <th class="col-score">RQ@(i + 1)</th>
                        }
                        <th class="col-must-read">Must-Read</th>
                        <th class="col-actions">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var result in _filteredResults)
                    {
                        <tr class="result-row @(result.MustRead ? "must-read-row" : "")" @onclick="() => SelectResult(result)">
                            <td>
                                <input type="checkbox" @bind="result.IsSelected" @onclick:stopPropagation="true" />
                            </td>
                            <td class="title-cell">
                                <div class="paper-title" title="@result.Title">@result.Title</div>
                                @if (result.Topics.Any())
                                {
                                    <div class="paper-topics">
                                        @foreach (var topic in result.Topics.Take(3))
                                        {
                                            <span class="topic-tag">@topic</span>
                                        }
                                        @if (result.Topics.Count > 3)
                                        {
                                            <span class="topic-more">+@(result.Topics.Count - 3) more</span>
                                        }
                                    </div>
                                }
                            </td>
                            <td class="authors-cell">@GetTruncatedText(result.Authors, 30)</td>
                            <td class="year-cell">@result.Year</td>
                            <td class="venue-cell" title="@result.Venue">@GetTruncatedText(result.Venue, 20)</td>
                            @for (int i = 0; i < _researchQuestions.Count; i++)
                            {
                                var assessment = result.RQAssessments.FirstOrDefault(a => a.QuestionIndex == i);
                                <td class="score-cell">
                                    @if (assessment != null)
                                    {
                                        <div class="score-display">
                                            <div class="scores">
                                                <span class="relevance-score" title="Relevance: @assessment.RelevanceScore.ToString("F2")">
                                                    R: @assessment.RelevanceScore.ToString("F1")
                                                </span>
                                                <span class="contribution-score" title="Contribution: @assessment.ContributionScore.ToString("F2")">
                                                    C: @assessment.ContributionScore.ToString("F1")
                                                </span>
                                            </div>
                                            <div class="indicators">
                                                @if (assessment.RelevanceIndicator)
                                                {
                                                    <span class="indicator relevant" title="Relevant">âœ“R</span>
                                                }
                                                @if (assessment.ContributionIndicator)
                                                {
                                                    <span class="indicator contributing" title="Contributing">âœ“C</span>
                                                }
                                            </div>
                                        </div>
                                    }
                                </td>
                            }
                            <td class="must-read-cell">
                                @if (result.MustRead)
                                {
                                    <span class="must-read-badge">âœ“ Must-Read</span>
                                }
                            </td>
                            <td class="actions-cell">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewDetail(result)" @onclick:stopPropagation="true">
                                    View
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            @if (!_filteredResults.Any())
            {
                <div class="no-results">
                    <p>No papers match the current filters.</p>
                    <button class="btn btn-outline-primary" @onclick="ClearFilters">Clear Filters</button>
                </div>
            }
        </div>

        <div class="results-pagination">
            <div class="pagination-info">
                Showing @_filteredResults.Count of @_results.Count papers
            </div>
        </div>
    }
</div>

@if (_selectedResult != null)
{
    <div class="modal-overlay" @onclick="CloseDetailView">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Paper Details</h3>
                <button class="btn-close" @onclick="CloseDetailView">Ã—</button>
            </div>
            <div class="modal-body">
                <div class="detail-section">
                    <h4>@_selectedResult.Title</h4>
                    <p><strong>Authors:</strong> @_selectedResult.Authors</p>
                    <p><strong>Year:</strong> @_selectedResult.Year</p>
                    <p><strong>Venue:</strong> @_selectedResult.Venue</p>
                    @if (!string.IsNullOrEmpty(_selectedResult.DOI))
                    {
                        <p><strong>DOI:</strong> <a href="https://doi.org/@_selectedResult.DOI" target="_blank">@_selectedResult.DOI</a></p>
                    }
                </div>

                @if (!string.IsNullOrEmpty(_selectedResult.Abstract))
                {
                    <div class="detail-section">
                        <h4>Abstract</h4>
                        <p class="abstract-text">@_selectedResult.Abstract</p>
                    </div>
                }

                @if (_selectedResult.Keywords.Any())
                {
                    <div class="detail-section">
                        <h4>Keywords</h4>
                        <div class="keywords-list">
                            @foreach (var keyword in _selectedResult.Keywords)
                            {
                                <span class="keyword-tag">@keyword</span>
                            }
                        </div>
                    </div>
                }

                @if (_selectedResult.RQAssessments.Any())
                {
                    <div class="detail-section">
                        <h4>Assessment Results</h4>
                        @for (int i = 0; i < _selectedResult.RQAssessments.Count; i++)
                        {
                            var assessment = _selectedResult.RQAssessments[i];
                            <div class="assessment-item">
                                <h5>Research Question @(assessment.QuestionIndex + 1)</h5>
                                <p class="question-text">@_researchQuestions[assessment.QuestionIndex]</p>
                                
                                <div class="assessment-scores">
                                    <div class="score-item">
                                        <span class="score-label">Relevance:</span>
                                        <span class="score-value @(assessment.RelevanceIndicator ? "score-high" : "score-low")">
                                            @assessment.RelevanceScore.ToString("F2")
                                        </span>
                                    </div>
                                    <div class="score-item">
                                        <span class="score-label">Contribution:</span>
                                        <span class="score-value @(assessment.ContributionIndicator ? "score-high" : "score-low")">
                                            @assessment.ContributionScore.ToString("F2")
                                        </span>
                                    </div>
                                </div>

                                <div class="reasoning-section">
                                    <div class="reasoning-item">
                                        <h6>Relevance Reasoning:</h6>
                                        <p>@assessment.RelevanceReasoning</p>
                                    </div>
                                    <div class="reasoning-item">
                                        <h6>Contribution Reasoning:</h6>
                                        <p>@assessment.ContributionReasoning</p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}

<style>
.results-page {
    padding: 2rem;
    max-width: 1400px;
    margin: 0 auto;
}

.results-header {
    text-align: center;
    margin-bottom: 2rem;
}

.results-header h1 {
    font-size: 2rem;
    margin-bottom: 0.5rem;
}

.results-summary {
    background: white;
    border-radius: 0.5rem;
    padding: 2rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 2rem;
}

.summary-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
}

.summary-card {
    text-align: center;
    padding: 1rem;
    background: #f9f9f9;
    border-radius: 0.5rem;
}

.summary-card.highlight {
    background: #e3f2fd;
    border: 2px solid #1976d2;
}

.card-number {
    font-size: 2rem;
    font-weight: bold;
    color: #1976d2;
}

.card-label {
    color: #666;
    margin-top: 0.5rem;
}

.results-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
}

.results-filters {
    background: white;
    border-radius: 0.5rem;
    padding: 1.5rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 2rem;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    align-items: end;
}

.filter-group {
    display: flex;
    flex-direction: column;
}

.filter-group label {
    font-weight: 500;
    margin-bottom: 0.5rem;
}

.form-select {
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 0.25rem;
    font-family: inherit;
}

.threshold-controls {
    grid-column: span 2;
}

.threshold-sliders {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-top: 0.5rem;
}

.threshold-item {
    display: flex;
    flex-direction: column;
}

.threshold-slider {
    margin-top: 0.5rem;
}

.results-table-container {
    background: white;
    border-radius: 0.5rem;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 1rem;
}

.results-table {
    width: 100%;
    border-collapse: collapse;
}

.results-table th,
.results-table td {
    padding: 0.75rem;
    text-align: left;
    border-bottom: 1px solid #eee;
}

.results-table th {
    background: #f5f5f5;
    font-weight: 600;
    position: sticky;
    top: 0;
    z-index: 10;
}

.col-select { width: 40px; }
.col-title { width: 30%; }
.col-authors { width: 20%; }
.col-year { width: 60px; }
.col-venue { width: 15%; }
.col-score { width: 80px; }
.col-must-read { width: 100px; }
.col-actions { width: 80px; }

.result-row {
    cursor: pointer;
    transition: background-color 0.2s;
}

.result-row:hover {
    background: #f9f9f9;
}

.must-read-row {
    background: #fff8e1;
}

.must-read-row:hover {
    background: #fff3c4;
}

.title-cell {
    vertical-align: top;
}

.paper-title {
    font-weight: 500;
    margin-bottom: 0.25rem;
    line-height: 1.3;
}

.paper-topics {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
}

.topic-tag {
    background: #e3f2fd;
    color: #1976d2;
    padding: 0.125rem 0.25rem;
    border-radius: 0.125rem;
    font-size: 0.75rem;
}

.topic-more {
    color: #666;
    font-size: 0.75rem;
}

.authors-cell, .venue-cell {
    vertical-align: top;
    font-size: 0.9rem;
}

.year-cell {
    vertical-align: top;
    text-align: center;
}

.score-cell {
    vertical-align: top;
    text-align: center;
}

.score-display {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.25rem;
}

.scores {
    display: flex;
    flex-direction: column;
    gap: 0.125rem;
}

.relevance-score, .contribution-score {
    font-size: 0.75rem;
    padding: 0.125rem 0.25rem;
    border-radius: 0.125rem;
}

.relevance-score {
    background: #e8f5e8;
    color: #2e7d32;
}

.contribution-score {
    background: #fff3e0;
    color: #f57c00;
}

.indicators {
    display: flex;
    gap: 0.125rem;
}

.indicator {
    font-size: 0.625rem;
    padding: 0.125rem;
    border-radius: 0.125rem;
    font-weight: bold;
}

.indicator.relevant {
    background: #4caf50;
    color: white;
}

.indicator.contributing {
    background: #ff9800;
    color: white;
}

.must-read-cell {
    text-align: center;
    vertical-align: top;
}

.must-read-badge {
    background: #4caf50;
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 1rem;
    font-size: 0.75rem;
    font-weight: 500;
}

.actions-cell {
    text-align: center;
    vertical-align: top;
}

.no-results {
    text-align: center;
    padding: 3rem;
    color: #666;
}

.results-pagination {
    text-align: center;
    padding: 1rem;
    color: #666;
}

.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background: white;
    border-radius: 0.5rem;
    max-width: 800px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid #eee;
}

.modal-header h3 {
    margin: 0;
}

.btn-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #666;
}

.modal-body {
    padding: 1.5rem;
}

.detail-section {
    margin-bottom: 2rem;
}

.detail-section h4,
.detail-section h5,
.detail-section h6 {
    margin-bottom: 0.5rem;
    color: #1976d2;
}

.abstract-text {
    line-height: 1.6;
    color: #333;
}

.keywords-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
}

.keyword-tag {
    background: #f0f0f0;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.9rem;
}

.assessment-item {
    margin-bottom: 2rem;
    padding: 1rem;
    background: #f9f9f9;
    border-radius: 0.5rem;
}

.question-text {
    font-style: italic;
    color: #666;
    margin-bottom: 1rem;
}

.assessment-scores {
    display: flex;
    gap: 2rem;
    margin-bottom: 1rem;
}

.score-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.score-label {
    font-weight: 500;
}

.score-value {
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-weight: bold;
}

.score-high {
    background: #4caf50;
    color: white;
}

.score-low {
    background: #f44336;
    color: white;
}

.reasoning-section {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
}

.reasoning-item h6 {
    margin-bottom: 0.25rem;
    font-size: 0.9rem;
}

.reasoning-item p {
    font-size: 0.9rem;
    color: #333;
    line-height: 1.4;
}

.btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

.btn-primary {
    background: #1976d2;
    color: white;
}

.btn-primary:hover {
    background: #1565c0;
}

.btn-outline-primary {
    background: transparent;
    color: #1976d2;
    border: 1px solid #1976d2;
}

.btn-outline-primary:hover {
    background: #1976d2;
    color: white;
}

.btn-sm {
    padding: 0.375rem 0.75rem;
    font-size: 0.875rem;
}

.loading, .error-state {
    text-align: center;
    padding: 3rem;
}

.loading-spinner {
    width: 2rem;
    height: 2rem;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #1976d2;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
}

@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

@@media (max-width: 768px) {
    .results-filters {
        grid-template-columns: 1fr;
    }
    
    .threshold-controls {
        grid-column: span 1;
    }
    
    .threshold-sliders {
        grid-template-columns: 1fr;
    }
    
    .reasoning-section {
        grid-template-columns: 1fr;
    }
    
    .assessment-scores {
        flex-direction: column;
        gap: 1rem;
    }
}
</style>

@code {
    [Parameter] public Guid JourneyId { get; set; }

    private JourneyDto? _journey;
    private UserIdentity? _currentUser;
    private bool _loading = true;
    private string? _error;

    private List<ScreeningResultItem> _results = new();
    private List<ScreeningResultItem> _filteredResults = new();
    private List<string> _researchQuestions = new();
    private ScreeningResultItem? _selectedResult;

    // Filter and sort state
    private string _currentFilter = "all";
    private string _sortBy = "relevance";
    private int _selectedQuestionFilter = -1;
    private double _relevanceThreshold = 0.7;
    private double _contributionThreshold = 0.7;

    // Summary counts
    private int _mustReadCount = 0;
    private int _relevantCount = 0;
    private int _contributingCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadResults();
    }

    private async Task LoadResults()
    {
        _loading = true;
        _error = null;
        StateHasChanged();

        try
        {
            _currentUser = await AuthService.GetCurrentUserAsync();
            if (_currentUser == null)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            _journey = await JourneyService.GetJourneyAsync(_currentUser.Id, JourneyId);
            if (_journey == null)
            {
                _error = "Journey not found";
                return;
            }

            // Load research questions from framework
            if (_journey.Context?.TryGetValue("research_questions", out var questionsObj) == true)
            {
                _researchQuestions = JsonSerializer.Deserialize<List<string>>(questionsObj.ToString() ?? "[]") ?? new List<string>();
            }

            // Load results (placeholder data for demo)
            LoadDemoResults();

            // Apply initial filters
            ApplyFilter();
        }
        catch (Exception ex)
        {
            _error = $"Failed to load results: {ex.Message}";
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void LoadDemoResults()
    {
        // Generate demo results for demonstration
        var random = new Random(42); // Fixed seed for consistent demo data
        _results.Clear();

        var samplePapers = new[]
        {
            new { Title = "Large Language Models for Cybersecurity Threat Detection", Authors = "Smith, J.; Doe, A.; Johnson, M.", Year = 2023, Venue = "IEEE Security & Privacy", Abstract = "This paper explores the application of large language models in detecting and analyzing cybersecurity threats through natural language processing techniques." },
            new { Title = "Machine Learning Applications in Network Security", Authors = "Brown, K.; Wilson, L.", Year = 2023, Venue = "ACM Computing Surveys", Abstract = "A comprehensive survey of machine learning techniques applied to network security, including intrusion detection and anomaly analysis." },
            new { Title = "AI-Driven Threat Intelligence Analysis", Authors = "Davis, R.; Miller, S.; Clark, T.", Year = 2024, Venue = "Journal of Cybersecurity", Abstract = "This work presents a novel approach to threat intelligence analysis using artificial intelligence and natural language understanding." },
            new { Title = "Deep Learning for Malware Detection", Authors = "Garcia, M.; Rodriguez, P.", Year = 2022, Venue = "Computers & Security", Abstract = "An investigation into deep learning approaches for automated malware detection and classification in enterprise environments." },
            new { Title = "Natural Language Processing in Security Operations", Authors = "Lee, H.; Kim, Y.; Park, J.", Year = 2024, Venue = "IEEE Transactions on Information Forensics and Security", Abstract = "This paper examines how natural language processing can enhance security operations center capabilities and threat response." }
        };

        for (int i = 0; i < samplePapers.Length; i++)
        {
            var paper = samplePapers[i];
            var result = new ScreeningResultItem
            {
                Title = paper.Title,
                Authors = paper.Authors,
                Year = paper.Year,
                Venue = paper.Venue,
                Abstract = paper.Abstract,
                DOI = $"10.1109/example.{i + 1}",
                Link = $"https://doi.org/10.1109/example.{i + 1}",
                Topics = new List<string> { "machine learning", "cybersecurity", "threat detection" },
                Entities = new List<string> { "LLM", "AI", "security" },
                Keywords = new List<string> { "machine learning", "cybersecurity", "artificial intelligence", "threat detection" }
            };

            // Generate assessments for each research question
            for (int q = 0; q < _researchQuestions.Count; q++)
            {
                var relevanceScore = Math.Round(random.NextDouble(), 2);
                var contributionScore = Math.Round(random.NextDouble(), 2);
                
                var assessment = new RQAssessmentItem
                {
                    QuestionIndex = q,
                    RelevanceScore = relevanceScore,
                    ContributionScore = contributionScore,
                    RelevanceIndicator = relevanceScore >= _relevanceThreshold,
                    ContributionIndicator = contributionScore >= _contributionThreshold,
                    RelevanceReasoning = $"This paper {(relevanceScore >= 0.7 ? "discusses" : "mentions")} topics related to research question {q + 1}.",
                    ContributionReasoning = $"This paper {(contributionScore >= 0.7 ? "directly contributes" : "provides limited contribution")} to research question {q + 1}."
                };

                result.RQAssessments.Add(assessment);
            }

            result.MustRead = result.RQAssessments.Any(a => a.RelevanceIndicator && a.ContributionIndicator);
            _results.Add(result);
        }

        // Calculate summary counts
        _mustReadCount = _results.Count(r => r.MustRead);
        _relevantCount = _results.Count(r => r.RQAssessments.Any(a => a.RelevanceIndicator));
        _contributingCount = _results.Count(r => r.RQAssessments.Any(a => a.ContributionIndicator));
    }

    private void ApplyFilter()
    {
        _filteredResults = _results.Where(r =>
        {
            // Apply main filter
            var passesMainFilter = _currentFilter switch
            {
                "must-read" => r.MustRead,
                "relevant" => r.RQAssessments.Any(a => a.RelevanceIndicator),
                "contributing" => r.RQAssessments.Any(a => a.ContributionIndicator),
                _ => true
            };

            if (!passesMainFilter) return false;

            // Apply research question filter
            if (_selectedQuestionFilter >= 0)
            {
                var assessment = r.RQAssessments.FirstOrDefault(a => a.QuestionIndex == _selectedQuestionFilter);
                return assessment != null && (assessment.RelevanceIndicator || assessment.ContributionIndicator);
            }

            return true;
        }).ToList();

        ApplySort();
        StateHasChanged();
    }

    private void ApplySort()
    {
        _filteredResults = _sortBy switch
        {
            "contribution" => _filteredResults.OrderByDescending(r => r.RQAssessments.Max(a => a.ContributionScore)).ToList(),
            "title" => _filteredResults.OrderBy(r => r.Title).ToList(),
            "year" => _filteredResults.OrderByDescending(r => r.Year).ToList(),
            "authors" => _filteredResults.OrderBy(r => r.Authors).ToList(),
            _ => _filteredResults.OrderByDescending(r => r.RQAssessments.Max(a => a.RelevanceScore)).ToList()
        };
    }

    private void ApplyThresholdFilter()
    {
        // Update indicators based on new thresholds
        foreach (var result in _results)
        {
            foreach (var assessment in result.RQAssessments)
            {
                assessment.RelevanceIndicator = assessment.RelevanceScore >= _relevanceThreshold;
                assessment.ContributionIndicator = assessment.ContributionScore >= _contributionThreshold;
            }
            result.MustRead = result.RQAssessments.Any(a => a.RelevanceIndicator && a.ContributionIndicator);
        }

        // Recalculate counts
        _mustReadCount = _results.Count(r => r.MustRead);
        _relevantCount = _results.Count(r => r.RQAssessments.Any(a => a.RelevanceIndicator));
        _contributingCount = _results.Count(r => r.RQAssessments.Any(a => a.ContributionIndicator));

        ApplyFilter();
    }

    private void ClearFilters()
    {
        _currentFilter = "all";
        _selectedQuestionFilter = -1;
        _relevanceThreshold = 0.7;
        _contributionThreshold = 0.7;
        ApplyThresholdFilter();
    }

    private void ToggleSelectAll()
    {
        var allSelected = _filteredResults.All(r => r.IsSelected);
        foreach (var result in _filteredResults)
        {
            result.IsSelected = !allSelected;
        }
        StateHasChanged();
    }

    private void SelectResult(ScreeningResultItem result)
    {
        result.IsSelected = !result.IsSelected;
        StateHasChanged();
    }

    private void ViewDetail(ScreeningResultItem result)
    {
        _selectedResult = result;
        StateHasChanged();
    }

    private void CloseDetailView()
    {
        _selectedResult = null;
        StateHasChanged();
    }

    private async Task ExportToCsv()
    {
        // TODO: Implement CSV export functionality
        await JSRuntime.InvokeVoidAsync("alert", "CSV export functionality will be implemented with actual process integration.");
    }

    private async Task StartNewAnalysis()
    {
        Navigation.NavigateTo($"/journeys/{JourneyId}/process");
    }

    private string GetTruncatedText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
            return text ?? "";
        return text.Substring(0, maxLength - 3) + "...";
    }

    private void OnFilterChange(ChangeEventArgs e)
    {
        _currentFilter = e.Value?.ToString() ?? "all";
        ApplyFilter();
    }

    private void OnSortChange(ChangeEventArgs e)
    {
        _sortBy = e.Value?.ToString() ?? "relevance";
        ApplySort();
    }

    private void OnQuestionFilterChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var questionIndex))
        {
            _selectedQuestionFilter = questionIndex;
            ApplyFilter();
        }
    }

    // Data models
    public class ScreeningResultItem
    {
        public string Title { get; set; } = "";
        public string Abstract { get; set; } = "";
        public string Authors { get; set; } = "";
        public int Year { get; set; }
        public string Venue { get; set; } = "";
        public string DOI { get; set; } = "";
        public string Link { get; set; } = "";
        public List<string> Topics { get; set; } = new();
        public List<string> Entities { get; set; } = new();
        public List<string> Keywords { get; set; } = new();
        public List<RQAssessmentItem> RQAssessments { get; set; } = new();
        public bool MustRead { get; set; }
        public bool IsSelected { get; set; }
    }

    public class RQAssessmentItem
    {
        public int QuestionIndex { get; set; }
        public double RelevanceScore { get; set; }
        public double ContributionScore { get; set; }
        public bool RelevanceIndicator { get; set; }
        public bool ContributionIndicator { get; set; }
        public string RelevanceReasoning { get; set; } = "";
        public string ContributionReasoning { get; set; } = "";
    }
}