@page "/"
@page "/dashboard"
@rendermode InteractiveServer
@using veritheia.Web.Services
@using Veritheia.Data.Entities
@using Veritheia.Data.Services
@using Veritheia.ApiService.Services
@using Veritheia.Common.Models
@inject RenderContextService ContextService
@inject Veritheia.ApiService.Services.JourneyApiService JourneyService
@inject NavigationManager Navigation

<PageTitle>Dashboard - Veritheia</PageTitle>

<div class="dashboard">
    <div class="dashboard-header">
        <h1 class="dashboard-title">Active Journeys (@(_journeys?.Count ?? 0))</h1>
        <button class="btn btn-primary" @onclick="NavigateToCreateJourney">
            <span class="btn-icon">+</span>
            New Journey
        </button>
    </div>

    @if (_loading)
    {
        <div class="loading">
            <div class="loading-spinner"></div>
            <p>Loading your journeys...</p>
        </div>
    }
    else if (_error != null)
    {
        <div class="error-state">
            <h3>Error Loading Dashboard</h3>
            <p>@_error</p>
            <button class="btn btn-primary" @onclick="OnInitializedAsync">Retry</button>
        </div>
    }
    else if (_journeys?.Any() != true)
    {
        <div class="empty-state">
            <div class="empty-icon">🚀</div>
            <h3>Welcome to Veritheia</h3>
            <p>Create your first journey to begin your formative experience through document engagement.</p>
            <button class="btn btn-primary" @onclick="NavigateToCreateJourney">Create Your First Journey</button>
        </div>
    }
    else
    {
        <div class="journeys-grid">
            @foreach (var journey in _journeys)
            {
                <div class="journey-card">
                    <div class="journey-card-header">
                        <div class="journey-icon">
                            @GetJourneyIcon(journey.ProcessType)
                        </div>
                        <h3 class="journey-title">@journey.Purpose</h3>
                    </div>
                    
                    <div class="journey-meta">
                        <div class="journey-meta-item">
                            <span class="meta-label">Persona:</span>
                            <span class="meta-value">@(journey.Persona?.Domain ?? "Unknown")</span>
                        </div>
                        <div class="journey-meta-item">
                            <span class="meta-label">Process:</span>
                            <span class="meta-value">@GetProcessDisplayName(journey.ProcessType)</span>
                        </div>
                        <div class="journey-meta-item">
                            <span class="meta-label">Status:</span>
                            <span class="meta-value status-@journey.State.ToLower()">@journey.State</span>
                        </div>
                    </div>

                    @if (journey.ProcessExecutions.Any())
                    {
                        var latestExecution = journey.ProcessExecutions.OrderByDescending(pe => pe.CreatedAt).First();
                        @if (latestExecution.State == "Running")
                        {
                            <div class="journey-progress">
                                <div class="progress-stats">
                                    <span class="stat">Processing...</span>
                                </div>
                                <div class="progress-bar">
                                    <div class="progress-fill animated" style="width: 50%"></div>
                                    <span class="progress-text">Running</span>
                                </div>
                            </div>
                        }
                        else if (latestExecution.State == "Completed")
                        {
                            <div class="journey-progress">
                                <div class="progress-stats">
                                    <span class="stat highlight">✓ Completed</span>
                                    @if (latestExecution.CompletedAt.HasValue)
                                    {
                                        <span class="stat">@latestExecution.CompletedAt.Value.ToString("MMM dd")</span>
                                    }
                                </div>
                            </div>
                        }
                        else if (latestExecution.State == "Failed")
                        {
                            <div class="journey-progress">
                                <div class="progress-stats">
                                    <span class="stat error">⚠ Failed</span>
                                </div>
                            </div>
                        }
                    }

                    <div class="journey-meta-item">
                        <span class="meta-label">Last activity:</span>
                        <span class="meta-value">@GetRelativeTime(journey.UpdatedAt ?? journey.CreatedAt)</span>
                    </div>

                    <div class="journey-actions">
                        @if (journey.State == JourneyState.Active.ToString())
                        {
                            <button class="btn btn-sm btn-primary" @onclick="() => ViewJourney(journey.Id)">
                                Continue
                            </button>
                        }
                        
                        @if (journey.ProcessExecutions.Any(pe => pe.State == "Completed"))
                        {
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewResults(journey.Id)">
                                View Results
                            </button>
                        }
                        
                        @if (journey.State == JourneyState.Completed.ToString())
                        {
                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => ArchiveJourney(journey.Id)">
                                Archive
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
    }

    @* Recent activity will be shown when JourneyStatistics is implemented
    @if (_statistics?.RecentActivity.Any() == true)
    {
        <div class="recent-activity">
            <h2 class="section-title">Recent Activity</h2>
            <div class="activity-list">
                @foreach (var activity in _statistics.RecentActivity.Take(5))
                {
                    <div class="activity-item">
                        <span class="activity-icon">@GetActivityIcon(activity.ProcessType)</span>
                        <div class="activity-content">
                            <span class="activity-text">@activity.Description</span>
                            <span class="activity-time">@GetRelativeTime(activity.Timestamp)</span>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    *@
</div>

@code {
    private List<Journey>? _journeys;
    // private JourneyStatistics? _statistics; // Will be used when JourneyStatistics type is defined
    private UserIdentity? _currentUser;
    private bool _loading = true;
    private string? _error;
    private RenderContext? context;

    protected override void OnInitialized()
    {
        context = ContextService.GetOrCreateContext();
        context.RequireCurrentUser();
        context.RequireJourneys();
        context.RequireStatistics();
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _loading = true;
            _error = null;
            
            // DO NOT call InitializeContextAsync here - MainLayout handles it
            // Get the context that MainLayout has initialized
            context = ContextService.GetOrCreateContext();
            
            _currentUser = context?.CurrentUser;

            if (_currentUser == null)
            {
                // MainLayout will handle redirect to login
                _loading = false;
                return;
            }

            _journeys = context?.Journeys;
            // Statistics will be loaded when JourneyStatistics type is defined
            // _statistics = context?.Statistics;
            _loading = false;
        }
        catch (Exception ex)
        {
            _error = $"Failed to load dashboard: {ex.Message}";
            _loading = false;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void NavigateToCreateJourney()
    {
        Navigation.NavigateTo("/journeys/create");
    }

    private void ViewJourney(Guid journeyId)
    {
        Navigation.NavigateTo($"/journeys/{journeyId}");
    }

    private void ViewResults(Guid journeyId)
    {
        Navigation.NavigateTo($"/journeys/{journeyId}");
    }

    private async Task ArchiveJourney(Guid journeyId)
    {
        if (_currentUser == null) return;
        
        try
        {
            await JourneyService.ArchiveJourneyAsync(_currentUser.Id, journeyId);
            Navigation.NavigateTo(Navigation.Uri, forceLoad: true); // Force reload to refresh data
        }
        catch (Exception ex)
        {
            _error = $"Failed to archive journey: {ex.Message}";
            StateHasChanged();
        }
    }

    private string GetJourneyIcon(string processType) => processType switch
    {
        "systematic-screening" => "📊",
        "basic-constrained-composition" => "🎓",
        "SystematicScreeningProcess" => "📊",
        "ConstrainedCompositionProcess" => "🎓",
        _ => "📄"
    };

    private string GetProcessDisplayName(string processType) => processType switch
    {
        "systematic-screening" => "Systematic Screening",
        "basic-constrained-composition" => "Constrained Composition", 
        "SystematicScreeningProcess" => "Systematic Screening",
        "ConstrainedCompositionProcess" => "Constrained Composition",
        _ => processType
    };

    private string GetActivityIcon(string processType) => processType switch
    {
        "systematic-screening" => "🔍",
        "basic-constrained-composition" => "✍️",
        _ => "📋"
    };

    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;
        return timeSpan.TotalDays >= 1 ? $"{(int)timeSpan.TotalDays} day{(timeSpan.TotalDays >= 2 ? "s" : "")} ago"
             : timeSpan.TotalHours >= 1 ? $"{(int)timeSpan.TotalHours} hour{(timeSpan.TotalHours >= 2 ? "s" : "")} ago"
             : $"{(int)timeSpan.TotalMinutes} minute{(timeSpan.TotalMinutes >= 2 ? "s" : "")} ago";
    }
}