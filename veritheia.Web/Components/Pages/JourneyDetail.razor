@page "/journeys/{journeyId:guid}"
@rendermode InteractiveServer
@using veritheia.Web.Services
@using Veritheia.Data.DTOs
@using Veritheia.Common.Models
@using System.Text.Json
@inject JourneyApiService JourneyService
@inject AuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Journey Detail - Veritheia</PageTitle>

<div class="journey-detail-page">
    @if (_loading)
    {
        <div class="loading">
            <div class="loading-spinner"></div>
            <p>Loading journey...</p>
        </div>
    }
    else if (_error != null)
    {
        <div class="error-state">
            <h3>Error</h3>
            <p>@_error</p>
            <button class="btn btn-primary" @onclick="LoadJourney">Retry</button>
        </div>
    }
    else if (_journey != null)
    {
        <div class="journey-header">
            <h1>@_journey.Purpose</h1>
            <div class="journey-meta">
                <span class="meta-item">
                    <strong>Persona:</strong> @(_journey.Persona?.Domain ?? "Unknown")
                </span>
                <span class="meta-item">
                    <strong>Process:</strong> @GetProcessDisplayName(_journey.ProcessType)
                </span>
                <span class="meta-item">
                    <strong>State:</strong> @_journey.State
                </span>
            </div>
        </div>

        <div class="journey-status-card">
            <h2>Journey Status</h2>
            @if (_latestExecution != null)
            {
                @if (_latestExecution.State == "Running")
                {
                    <div class="status-running">
                        <p>üîÑ Process is currently running...</p>
                        <button class="btn btn-primary" @onclick="NavigateToProcessExecution">
                            View Progress
                        </button>
                    </div>
                }
                else if (_latestExecution.State == "Completed")
                {
                    <div class="status-completed">
                        <p>‚úÖ Process completed successfully</p>
                        <div class="completion-stats">
                            <span class="stat">Process completed</span>
                            @if (_latestExecution.CompletedAt.HasValue)
                            {
                                <span class="stat">@_latestExecution.CompletedAt.Value.ToString("MMM dd, HH:mm")</span>
                            }
                        </div>
                        <div class="actions">
                            <button class="btn btn-primary" @onclick="NavigateToResults">
                                üìä View Results
                            </button>
                            <button class="btn btn-outline-primary" @onclick="NavigateToProcessExecution">
                                üîÑ Run Again
                            </button>
                        </div>
                    </div>
                }
                else if (_latestExecution.State == "Failed")
                {
                    <div class="status-failed">
                        <p>‚ùå Process failed</p>
                        @if (!string.IsNullOrEmpty(_latestExecution.ErrorMessage))
                        {
                            <p class="error-message">@_latestExecution.ErrorMessage</p>
                        }
                        <button class="btn btn-primary" @onclick="NavigateToProcessExecution">
                            Retry Process
                        </button>
                    </div>
                }
            }
            else
            {
                <div class="status-not-started">
                    <p>Process has not been started yet</p>
                    <button class="btn btn-primary" @onclick="NavigateToProcessExecution">
                        üöÄ Start Process
                    </button>
                </div>
            }
        </div>

        <div class="journey-framework-card">
            <h2>Framework Configuration</h2>
            @if (HasFramework())
            {
                <div class="framework-summary">
                    @if (_journey.Context?.ContainsKey("research_questions") == true)
                    {
                        <div class="framework-item">
                            <h3>Research Questions</h3>
                            <ul>
                                @foreach (var question in GetResearchQuestions())
                                {
                                    <li>@question</li>
                                }
                            </ul>
                        </div>
                    }
                    <button class="btn btn-outline-primary" @onclick="NavigateToConfiguration">
                        ‚öôÔ∏è Edit Framework
                    </button>
                </div>
            }
            else
            {
                <div class="framework-empty">
                    <p>Framework not yet configured</p>
                    <button class="btn btn-primary" @onclick="NavigateToConfiguration">
                        ‚öôÔ∏è Configure Framework
                    </button>
                </div>
            }
        </div>

        <div class="journey-history-card">
            <h2>Process History</h2>
            @if (_journey.ProcessExecutions?.Any() == true)
            {
                <div class="history-list">
                    @foreach (var execution in _journey.ProcessExecutions.OrderByDescending(e => e.CreatedAt))
                    {
                        <div class="history-item">
                            <div class="history-header">
                                <span class="history-state state-@execution.State.ToLower()">@execution.State</span>
                                <span class="history-date">@execution.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                            </div>
                            @if (execution.CompletedAt.HasValue && execution.StartedAt.HasValue)
                            {
                                <div class="history-duration">
                                    Duration: @FormatDuration(execution.CompletedAt.Value - execution.StartedAt.Value)
                                </div>
                            }
                        </div>
                    }
                </div>
            }
            else
            {
                <p>No process executions yet</p>
            }
        </div>
    }
</div>

<style>
.journey-detail-page {
    padding: 2rem;
    max-width: 1200px;
    margin: 0 auto;
}

.journey-header {
    margin-bottom: 2rem;
}

.journey-header h1 {
    font-size: 2rem;
    margin-bottom: 1rem;
}

.journey-meta {
    display: flex;
    gap: 2rem;
    color: #666;
}

.meta-item {
    display: flex;
    gap: 0.5rem;
}

.journey-status-card,
.journey-framework-card,
.journey-history-card {
    background: white;
    border-radius: 0.5rem;
    padding: 2rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 2rem;
}

.journey-status-card h2,
.journey-framework-card h2,
.journey-history-card h2 {
    margin-bottom: 1.5rem;
    color: #1976d2;
}

.status-running,
.status-completed,
.status-failed,
.status-not-started {
    padding: 1rem;
    border-radius: 0.25rem;
}

.status-running {
    background: #e3f2fd;
    border-left: 4px solid #2196f3;
}

.status-completed {
    background: #e8f5e9;
    border-left: 4px solid #4caf50;
}

.status-failed {
    background: #ffebee;
    border-left: 4px solid #f44336;
}

.status-not-started {
    background: #f5f5f5;
    border-left: 4px solid #9e9e9e;
}

.completion-stats {
    display: flex;
    gap: 2rem;
    margin: 1rem 0;
}

.stat {
    font-size: 1.1rem;
    color: #666;
}

.stat.highlight {
    color: #1976d2;
    font-weight: bold;
}

.actions {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
}

.framework-summary {
    background: #f9f9f9;
    padding: 1rem;
    border-radius: 0.25rem;
}

.framework-item h3 {
    margin-bottom: 0.5rem;
    color: #333;
}

.framework-item ul {
    margin: 0.5rem 0;
    padding-left: 1.5rem;
}

.framework-empty {
    padding: 1rem;
    background: #f5f5f5;
    border-radius: 0.25rem;
    text-align: center;
}

.history-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.history-item {
    padding: 1rem;
    background: #f9f9f9;
    border-radius: 0.25rem;
}

.history-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
}

.history-state {
    padding: 0.25rem 0.75rem;
    border-radius: 0.25rem;
    font-size: 0.9rem;
    font-weight: 500;
}

.state-running {
    background: #e3f2fd;
    color: #1565c0;
}

.state-completed {
    background: #e8f5e9;
    color: #2e7d32;
}

.state-failed {
    background: #ffebee;
    color: #c62828;
}

.history-date {
    color: #666;
    font-size: 0.9rem;
}

.history-duration {
    color: #999;
    font-size: 0.9rem;
}

.btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

.btn-primary {
    background: #1976d2;
    color: white;
}

.btn-primary:hover {
    background: #1565c0;
}

.btn-outline-primary {
    background: transparent;
    color: #1976d2;
    border: 1px solid #1976d2;
}

.btn-outline-primary:hover {
    background: #e3f2fd;
}

.loading, .error-state {
    text-align: center;
    padding: 3rem;
}

.loading-spinner {
    width: 2rem;
    height: 2rem;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #1976d2;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
}

@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</style>

@code {
    [Parameter] public Guid JourneyId { get; set; }

    private JourneyDto? _journey;
    private ProcessExecutionDto? _latestExecution;
    private UserIdentity? _currentUser;
    private bool _loading = true;
    private string? _error;

    protected override async Task OnInitializedAsync()
    {
        await LoadJourney();
    }

    private async Task LoadJourney()
    {
        _loading = true;
        _error = null;
        StateHasChanged();

        try
        {
            _currentUser = await AuthService.GetCurrentUserAsync();
            if (_currentUser == null)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            _journey = await JourneyService.GetJourneyAsync(_currentUser.Id, JourneyId);
            if (_journey == null)
            {
                _error = "Journey not found";
                return;
            }

            // Get the latest execution if any
            if (_journey.ProcessExecutions?.Any() == true)
            {
                _latestExecution = _journey.ProcessExecutions
                    .OrderByDescending(e => e.CreatedAt)
                    .FirstOrDefault();
            }
        }
        catch (Exception ex)
        {
            _error = $"Failed to load journey: {ex.Message}";
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private bool HasFramework()
    {
        return _journey?.Context?.ContainsKey("research_questions") == true ||
               _journey?.Context?.ContainsKey("learning_objectives") == true;
    }

    private List<string> GetResearchQuestions()
    {
        if (_journey?.Context?.TryGetValue("research_questions", out var questionsObj) == true)
        {
            try
            {
                return JsonSerializer.Deserialize<List<string>>(questionsObj.ToString() ?? "[]") ?? new List<string>();
            }
            catch
            {
                return new List<string>();
            }
        }
        return new List<string>();
    }

    private string GetProcessDisplayName(string processType) => processType switch
    {
        "systematic-screening" => "Systematic Literature Screening",
        "SystematicScreeningProcess" => "Systematic Literature Screening",
        "basic-constrained-composition" => "Constrained Composition",
        "ConstrainedCompositionProcess" => "Constrained Composition",
        _ => processType
    };

    private string FormatDuration(TimeSpan duration)
    {
        if (duration.TotalHours >= 1)
            return $"{(int)duration.TotalHours}h {duration.Minutes}m";
        else
            return $"{duration.Minutes}m {duration.Seconds}s";
    }

    private void NavigateToConfiguration()
    {
        Navigation.NavigateTo($"/journeys/{JourneyId}/configure");
    }

    private void NavigateToProcessExecution()
    {
        Navigation.NavigateTo($"/journeys/{JourneyId}/process");
    }

    private void NavigateToResults()
    {
        Navigation.NavigateTo($"/journeys/{JourneyId}/results");
    }
}