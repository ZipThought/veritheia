@page "/journeys/create"
@using Microsoft.AspNetCore.Components.Web
@using veritheia.Web.Services
@using Veritheia.Data.Entities
@using Veritheia.Data.ViewModels
@using Veritheia.ApiService.Services
@using Veritheia.Common.Models
@inject NavigationManager Navigation
@inject Veritheia.ApiService.Services.JourneyApiService JourneyService
@inject Veritheia.ApiService.Services.PersonaApiService PersonaService
@inject AuthenticationService AuthService
@inject ProcessConfigurationService ProcessConfig

<PageTitle>Create New Journey - Veritheia</PageTitle>

<div class="create-journey">
    <div class="create-journey-header">
        <h1 class="page-title">Create New Journey</h1>
        <button class="btn btn-outline-secondary" @onclick="Cancel">
            <span class="btn-icon">Ã—</span>
            Cancel
        </button>
    </div>

    <div class="create-journey-form">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">
                <strong>Error:</strong> @errorMessage
            </div>
        }

        <div class="form-section">
            <h2 class="section-title">Journey Details</h2>
            
            <div class="form-group">
                <label for="journey-name" class="form-label">Journey Name</label>
                <input 
                    id="journey-name" 
                    type="text" 
                    class="form-control" 
                    placeholder="e.g., Cybersecurity AI Applications Review"
                    @bind="journeyName" 
                    @bind:event="oninput" />
                @if (showValidation && string.IsNullOrWhiteSpace(journeyName))
                {
                    <div class="validation-message">Journey name is required.</div>
                }
            </div>

            <div class="form-group">
                <label for="journey-purpose" class="form-label">Purpose</label>
                <textarea 
                    id="journey-purpose" 
                    class="form-control" 
                    rows="3"
                    placeholder="e.g., Systematic review of AI/ML applications in cyber defense"
                    @bind="journeyPurpose" 
                    @bind:event="oninput"></textarea>
                @if (showValidation && string.IsNullOrWhiteSpace(journeyPurpose))
                {
                    <div class="validation-message">Purpose is required.</div>
                }
            </div>
        </div>

        <div class="form-section">
            <h2 class="section-title">Select Persona</h2>
            <div class="persona-grid">
                @foreach (var persona in availablePersonas)
                {
                    <div class="persona-card @(selectedPersonaId == persona.Id ? "selected" : "")" 
                         @onclick="() => SelectPersona(persona.Id)">
                        <div class="persona-icon">ðŸ‘¤</div>
                        <h3 class="persona-title">@persona.Domain</h3>
                        <p class="persona-description">@GetPersonaDescription(persona.Domain)</p>
                    </div>
                }
            </div>
            @if (showValidation && selectedPersonaId == Guid.Empty)
            {
                <div class="validation-message">Please select a persona.</div>
            }
        </div>

        <div class="form-section">
            <h2 class="section-title">Select Process</h2>
            <div class="process-grid">
                @foreach (var process in availableProcesses)
                {
                    <div class="process-card @(selectedProcessType == process.Type ? "selected" : "")" 
                         @onclick="() => SelectProcess(process.Type)">
                        <div class="process-icon">@process.Icon</div>
                        <h3 class="process-title">@process.DisplayName</h3>
                        <p class="process-description">@process.Description</p>
                        <div class="process-requirements">
                            <strong>Requires:</strong> @process.Requirements
                        </div>
                    </div>
                }
            </div>
            @if (showValidation && string.IsNullOrWhiteSpace(selectedProcessType))
            {
                <div class="validation-message">Please select a process.</div>
            }
        </div>

        <div class="form-actions">
            <button class="btn btn-primary" @onclick="CreateNewJourneyAsync" disabled="@isCreating">
                @if (isCreating)
                {
                    <span class="spinner"></span>
                    <span>Creating Journey...</span>
                }
                else
                {
                    <span class="btn-icon">+</span>
                    <span>Create Journey</span>
                }
            </button>
            <button class="btn btn-outline-secondary" @onclick="Cancel" disabled="@isCreating">
                Cancel
            </button>
        </div>
    </div>
</div>

@code {
    private string journeyName = "";
    private string journeyPurpose = "";
    private Guid selectedPersonaId = Guid.Empty;
    private string selectedProcessType = "";
    private bool showValidation = false;
    private bool isCreating = false;
    private string? errorMessage;

    private List<Persona> availablePersonas = new();
    private List<ProcessOptionView> availableProcesses = new();
    private UserIdentity? currentUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableOptions();
    }

    private async Task LoadAvailableOptions()
    {
        try
        {
            // Get current authenticated user
            currentUser = await AuthService.GetCurrentUserAsync();
            if (currentUser == null)
            {
                Navigation.NavigateTo("/login");
                return;
            }
            
            // Load user's personas
            availablePersonas = await PersonaService.GetUserPersonasAsync(currentUser.Id);

            // Load available processes from configuration
            availableProcesses = ProcessConfig.GetAvailableProcesses();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load options: {ex.Message}";
            Console.WriteLine($"CreateJourney load error: {ex}");
        }
    }

    private void SelectPersona(Guid personaId)
    {
        selectedPersonaId = personaId;
        showValidation = false;
        errorMessage = null;
    }

    private void SelectProcess(string processType)
    {
        selectedProcessType = processType;
        showValidation = false;
        errorMessage = null;
    }

    private async Task CreateNewJourneyAsync()
    {
        showValidation = true;
        errorMessage = null;

        // Validate form
        if (string.IsNullOrWhiteSpace(journeyName) || 
            string.IsNullOrWhiteSpace(journeyPurpose) ||
            selectedPersonaId == Guid.Empty ||
            string.IsNullOrWhiteSpace(selectedProcessType))
        {
            return;
        }

        if (currentUser == null)
        {
            errorMessage = "User not found. Please refresh the page.";
            return;
        }

        isCreating = true;
        StateHasChanged();

        try
        {
            // Create the journey using the API service
            var journey = await JourneyService.CreateJourneyAsync(
                currentUser.Id,
                selectedPersonaId, 
                selectedProcessType,
                journeyPurpose);

            // Navigate to the new journey
            Navigation.NavigateTo($"/journeys/{journey.Id}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to create journey: {ex.Message}";
            isCreating = false;
            StateHasChanged();
            Console.WriteLine($"Journey creation error: {ex}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }

    private string GetPersonaDescription(string domain) => domain switch
    {
        "Researcher" => "Domain expertise, investigation methods, systematic approaches",
        "Student" => "Academic vocabulary, learning-focused patterns, comprehension goals",
        "Entrepreneur" => "Business terminology, market analysis approaches, opportunity assessment",
        _ => "Custom intellectual style and methodological preferences"
    };


}
