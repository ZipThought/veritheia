@page "/journeys/{journeyId:guid}/process"
@using veritheia.Web.Services
@using Veritheia.Data.DTOs
@using Veritheia.Common.Models
@using Veritheia.Core.Interfaces
@using Veritheia.Core.ValueObjects
@using Veritheia.Data.Services
@using System.Text.Json
@inject JourneyApiService JourneyService
@inject AuthenticationService AuthService
@inject ProcessEngine ProcessEngine
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Execute Process - Veritheia</PageTitle>

<div class="process-execution-page">
    @if (_loading)
    {
        <div class="loading">
            <div class="loading-spinner"></div>
            <p>Loading journey...</p>
        </div>
    }
    else if (_error != null)
    {
        <div class="error-state">
            <h3>Error</h3>
            <p>@_error</p>
            <button class="btn btn-primary" @onclick="LoadJourney">Retry</button>
        </div>
    }
    else if (_journey != null)
    {
        <div class="execution-header">
            <h1>Execute Process</h1>
            <p>Journey: <strong>@_journey.Purpose</strong></p>
            <p>Process: <strong>@GetProcessDisplayName(_journey.ProcessType)</strong></p>
        </div>

        @if (!_isExecuting && !_isCompleted)
        {
            <div class="pre-execution-section">
                <div class="readiness-card">
                    <h2>üìã Execution Readiness</h2>
                    
                    <div class="readiness-checks">
                        <div class="check-item @(_hasFramework ? "check-pass" : "check-fail")">
                            <span class="check-icon">@(_hasFramework ? "‚úì" : "‚úó")</span>
                            <span>Framework Configured</span>
                            @if (!_hasFramework)
                            {
                                <button class="btn btn-sm btn-outline-primary" @onclick="NavigateToConfiguration">
                                    Configure Now
                                </button>
                            }
                        </div>
                        
                        <div class="check-item @(_hasDataset ? "check-pass" : "check-fail")">
                            <span class="check-icon">@(_hasDataset ? "‚úì" : "‚úó")</span>
                            <span>Dataset Ready (@_estimatedDocuments documents)</span>
                            @if (!_hasDataset)
                            {
                                <button class="btn btn-sm btn-outline-primary" @onclick="NavigateToDocuments">
                                    Upload Dataset
                                </button>
                            }
                        </div>
                        
                        <div class="check-item check-info">
                            <span class="check-icon">‚ÑπÔ∏è</span>
                            <span>Estimated processing time: @_estimatedTime</span>
                        </div>
                    </div>
                </div>

                @if (_journey.ProcessType == "systematic-screening" || _journey.ProcessType == "SystematicScreeningProcess")
                {
                    <div class="execution-config-card">
                        <h3>Processing Configuration</h3>
                        
                        <div class="config-section">
                            <h4>Dataset Input</h4>
                            <div class="dataset-input">
                                <label for="csvContent">CSV Content (paste your dataset here):</label>
                                <textarea @bind="_csvContent" 
                                         placeholder="Paste your CSV data here, including headers: title,abstract,authors,year,venue,doi,link,keywords"
                                         rows="8"
                                         class="form-control csv-textarea"
                                         id="csvContent"></textarea>
                                <div class="csv-help">
                                    <p><strong>Required columns:</strong> title, abstract, authors, year, venue, doi, link, keywords</p>
                                    <p><strong>Example:</strong></p>
                                    <code>title,abstract,authors,year,venue,doi,link,keywords<br/>
"Machine Learning for Cybersecurity","This paper explores...","Smith, J.; Doe, A.",2023,"IEEE Security","10.1109/example","https://doi.org/10.1109/example","machine learning;cybersecurity"</code>
                                </div>
                            </div>
                        </div>

                        @if (_frameworkSummary != null)
                        {
                            <div class="config-section">
                                <h4>Research Framework Summary</h4>
                                <div class="framework-summary">
                                    <div class="summary-item">
                                        <strong>Research Questions (@_frameworkSummary.QuestionCount):</strong>
                                        <ul>
                                            @foreach (var question in _frameworkSummary.Questions.Take(3))
                                            {
                                                <li>@question</li>
                                            }
                                            @if (_frameworkSummary.Questions.Count > 3)
                                            {
                                                <li><em>...and @(_frameworkSummary.Questions.Count - 3) more</em></li>
                                            }
                                        </ul>
                                    </div>
                                    
                                    <div class="summary-item">
                                        <strong>Thresholds:</strong>
                                        <span>Relevance ‚â• @_frameworkSummary.RelevanceThreshold, Contribution ‚â• @_frameworkSummary.ContributionThreshold</span>
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="execution-actions">
                            <button class="btn btn-primary btn-large" 
                                    @onclick="StartExecution" 
                                    disabled="@(!CanStartExecution())">
                                <span class="btn-icon">üöÄ</span>
                                Start Systematic Screening
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
        else if (_isExecuting)
        {
            <div class="execution-progress-section">
                <div class="progress-card">
                    <h2>üîÑ Processing in Progress</h2>
                    
                    <div class="progress-stats">
                        <div class="stat-item">
                            <span class="stat-value">@_processedCount</span>
                            <span class="stat-label">of @_totalCount processed</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-value">@_currentProgress%</span>
                            <span class="stat-label">complete</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-value">@_mustReadCount</span>
                            <span class="stat-label">must-read found</span>
                        </div>
                    </div>

                    <div class="progress-bar">
                        <div class="progress-fill" style="width: @_currentProgress%"></div>
                        <span class="progress-text">@_currentProgress%</span>
                    </div>

                    @if (!string.IsNullOrEmpty(_currentDocument))
                    {
                        <div class="current-processing">
                            <p><strong>Currently processing:</strong></p>
                            <p class="current-doc">@_currentDocument</p>
                        </div>
                    }

                    <div class="time-info">
                        <span>Elapsed: @_elapsedTime</span>
                        <span>Estimated remaining: @_remainingTime</span>
                    </div>

                    <div class="execution-actions">
                        <button class="btn btn-outline-secondary" @onclick="PauseExecution">
                            ‚è∏Ô∏è Pause
                        </button>
                        <button class="btn btn-outline-danger" @onclick="CancelExecution">
                            ‚ùå Cancel
                        </button>
                    </div>
                </div>
            </div>
        }
        else if (_isCompleted)
        {
            <div class="execution-complete-section">
                <div class="completion-card">
                    <h2>‚úÖ Processing Complete</h2>
                    
                    <div class="completion-stats">
                        <div class="stat-card">
                            <div class="stat-number">@_totalProcessed</div>
                            <div class="stat-desc">Papers Processed</div>
                        </div>
                        <div class="stat-card highlight">
                            <div class="stat-number">@_finalMustReadCount</div>
                            <div class="stat-desc">Must-Read Papers</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number">@_completionTime</div>
                            <div class="stat-desc">Total Processing Time</div>
                        </div>
                    </div>

                    <div class="completion-actions">
                        <button class="btn btn-primary btn-large" @onclick="ViewResults">
                            üìä View Results
                        </button>
                        <button class="btn btn-outline-primary" @onclick="DownloadResults">
                            üì• Download CSV
                        </button>
                    </div>
                </div>
            </div>
        }
    }
</div>

<style>
.process-execution-page {
    padding: 2rem;
    max-width: 1200px;
    margin: 0 auto;
}

.execution-header {
    text-align: center;
    margin-bottom: 2rem;
}

.execution-header h1 {
    font-size: 2rem;
    margin-bottom: 0.5rem;
}

.readiness-card, .execution-config-card, .progress-card, .completion-card {
    background: white;
    border-radius: 0.5rem;
    padding: 2rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 2rem;
}

.readiness-checks {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.check-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    border-radius: 0.25rem;
}

.check-pass {
    background: #e8f5e8;
    border-left: 4px solid #4caf50;
}

.check-fail {
    background: #ffeaea;
    border-left: 4px solid #f44336;
}

.check-info {
    background: #e3f2fd;
    border-left: 4px solid #2196f3;
}

.check-icon {
    font-size: 1.2rem;
    font-weight: bold;
}

.config-section {
    margin-bottom: 2rem;
}

.config-section h4 {
    margin-bottom: 1rem;
    color: #1976d2;
}

.dataset-input {
    margin-bottom: 1rem;
}

.csv-textarea {
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
}

.csv-help {
    margin-top: 0.5rem;
    padding: 1rem;
    background: #f5f5f5;
    border-radius: 0.25rem;
    font-size: 0.9rem;
}

.csv-help code {
    background: white;
    padding: 0.5rem;
    border-radius: 0.25rem;
    display: block;
    margin-top: 0.5rem;
    font-size: 0.8rem;
}

.framework-summary {
    background: #f9f9f9;
    padding: 1rem;
    border-radius: 0.25rem;
}

.summary-item {
    margin-bottom: 1rem;
}

.summary-item ul {
    margin: 0.5rem 0;
    padding-left: 1.5rem;
}

.execution-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 2rem;
}

.progress-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
}

.stat-item {
    text-align: center;
}

.stat-value {
    display: block;
    font-size: 2rem;
    font-weight: bold;
    color: #1976d2;
}

.stat-label {
    color: #666;
    font-size: 0.9rem;
}

.progress-bar {
    position: relative;
    height: 2rem;
    background: #f0f0f0;
    border-radius: 1rem;
    overflow: hidden;
    margin-bottom: 2rem;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #1976d2, #42a5f5);
    transition: width 0.3s ease;
}

.progress-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
    font-weight: bold;
}

.current-processing {
    background: #f5f5f5;
    padding: 1rem;
    border-radius: 0.25rem;
    margin-bottom: 1rem;
}

.current-doc {
    font-style: italic;
    margin: 0.5rem 0 0 0;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.time-info {
    display: flex;
    justify-content: space-between;
    color: #666;
    font-size: 0.9rem;
    margin-bottom: 2rem;
}

.completion-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
}

.stat-card {
    text-align: center;
    padding: 1rem;
    background: #f9f9f9;
    border-radius: 0.5rem;
}

.stat-card.highlight {
    background: #e3f2fd;
    border: 2px solid #1976d2;
}

.stat-number {
    font-size: 2.5rem;
    font-weight: bold;
    color: #1976d2;
}

.stat-desc {
    color: #666;
    margin-top: 0.5rem;
}

.btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

.btn-large {
    padding: 1rem 2rem;
    font-size: 1.1rem;
}

.btn-primary {
    background: #1976d2;
    color: white;
}

.btn-primary:hover {
    background: #1565c0;
}

.btn-primary:disabled {
    background: #ccc;
    cursor: not-allowed;
}

.btn-outline-primary {
    background: transparent;
    color: #1976d2;
    border: 1px solid #1976d2;
}

.btn-outline-secondary {
    background: transparent;
    color: #666;
    border: 1px solid #666;
}

.btn-outline-danger {
    background: transparent;
    color: #f44336;
    border: 1px solid #f44336;
}

.btn-sm {
    padding: 0.375rem 0.75rem;
    font-size: 0.875rem;
}

.form-control {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 0.25rem;
    font-family: inherit;
    resize: vertical;
}

.loading, .error-state {
    text-align: center;
    padding: 3rem;
}

.loading-spinner {
    width: 2rem;
    height: 2rem;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #1976d2;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
}

@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</style>

@code {
    [Parameter] public Guid JourneyId { get; set; }

    private JourneyDto? _journey;
    private UserIdentity? _currentUser;
    private bool _loading = true;
    private string? _error;
    
    // Readiness checks
    private bool _hasFramework = false;
    private bool _hasDataset = false;
    private int _estimatedDocuments = 0;
    private string _estimatedTime = "";
    
    // Execution state
    private bool _isExecuting = false;
    private bool _isCompleted = false;
    private string _csvContent = "";
    private FrameworkSummary? _frameworkSummary;
    
    // Progress tracking
    private int _processedCount = 0;
    private int _totalCount = 0;
    private int _currentProgress = 0;
    private int _mustReadCount = 0;
    private string _currentDocument = "";
    private string _elapsedTime = "";
    private string _remainingTime = "";
    
    // Completion stats
    private int _totalProcessed = 0;
    private int _finalMustReadCount = 0;
    private string _completionTime = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadJourney();
    }

    private async Task LoadJourney()
    {
        _loading = true;
        _error = null;
        StateHasChanged();

        try
        {
            _currentUser = await AuthService.GetCurrentUserAsync();
            if (_currentUser == null)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            _journey = await JourneyService.GetJourneyAsync(_currentUser.Id, JourneyId);
            if (_journey == null)
            {
                _error = "Journey not found";
                return;
            }

            // Check readiness
            await CheckExecutionReadiness();
        }
        catch (Exception ex)
        {
            _error = $"Failed to load journey: {ex.Message}";
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task CheckExecutionReadiness()
    {
        if (_journey == null) return;

        // Check if framework is configured
        _hasFramework = _journey.Context?.ContainsKey("research_questions") == true ||
                       _journey.Context?.ContainsKey("learning_objectives") == true;

        if (_hasFramework && _journey.Context != null)
        {
            LoadFrameworkSummary();
        }

        // Check if dataset is ready (placeholder logic)
        _hasDataset = !string.IsNullOrEmpty(_csvContent);
        _estimatedDocuments = EstimateDocumentCount(_csvContent);
        _estimatedTime = EstimateProcessingTime(_estimatedDocuments);
    }

    private void LoadFrameworkSummary()
    {
        if (_journey?.Context == null) return;

        try
        {
            if (_journey.Context.TryGetValue("research_questions", out var questionsObj))
            {
                var questions = JsonSerializer.Deserialize<List<string>>(questionsObj.ToString() ?? "[]") ?? new List<string>();
                var relevanceThreshold = 0.7;
                var contributionThreshold = 0.7;

                if (_journey.Context.TryGetValue("relevance_threshold", out var relObj))
                    double.TryParse(relObj.ToString(), out relevanceThreshold);

                if (_journey.Context.TryGetValue("contribution_threshold", out var contObj))
                    double.TryParse(contObj.ToString(), out contributionThreshold);

                _frameworkSummary = new FrameworkSummary
                {
                    Questions = questions,
                    QuestionCount = questions.Count,
                    RelevanceThreshold = relevanceThreshold,
                    ContributionThreshold = contributionThreshold
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading framework summary: {ex.Message}");
        }
    }

    private int EstimateDocumentCount(string csvContent)
    {
        if (string.IsNullOrEmpty(csvContent)) return 0;
        var lines = csvContent.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        return Math.Max(0, lines.Length - 1); // Subtract header
    }

    private string EstimateProcessingTime(int documentCount)
    {
        if (documentCount == 0) return "Unknown";
        var minutes = Math.Max(1, documentCount / 10); // ~10 documents per minute estimate
        if (minutes < 60)
            return $"~{minutes} minutes";
        else
            return $"~{minutes / 60}h {minutes % 60}m";
    }

    private bool CanStartExecution()
    {
        return _hasFramework && !string.IsNullOrEmpty(_csvContent) && _csvContent.Contains(',');
    }

    private string GetProcessDisplayName(string processType) => processType switch
    {
        "systematic-screening" => "Systematic Literature Screening",
        "SystematicScreeningProcess" => "Systematic Literature Screening",
        "basic-constrained-composition" => "Constrained Composition",
        "ConstrainedCompositionProcess" => "Constrained Composition",
        _ => processType
    };

    private async Task StartExecution()
    {
        if (!CanStartExecution() || _currentUser == null || _journey == null)
            return;

        _isExecuting = true;
        _isCompleted = false;
        _totalCount = EstimateDocumentCount(_csvContent);
        _processedCount = 0;
        StateHasChanged();

        try
        {
            // Create inputs dictionary
            var inputs = new Dictionary<string, object>
            {
                ["csv_content"] = _csvContent
            };

            // Add research questions from framework
            if (_frameworkSummary != null && _frameworkSummary.Questions.Any())
            {
                inputs["research_questions"] = string.Join("\n", _frameworkSummary.Questions);
            }

            // Execute the process using the real ProcessEngine
            var result = await ProcessEngine.ExecuteProcessAsync(
                _journey.ProcessType, 
                JourneyId, 
                inputs);

            if (result.Success)
            {
                _isCompleted = true;
                _isExecuting = false;
                
                // Extract results from the process output
                if (result.Data != null)
                {
                    if (result.Data.TryGetValue("total_articles", out var totalObj))
                        _totalProcessed = Convert.ToInt32(totalObj);
                    
                    if (result.Data.TryGetValue("must_read_count", out var mustReadObj))
                        _finalMustReadCount = Convert.ToInt32(mustReadObj);
                }
                
                _completionTime = "Complete";
                StateHasChanged();
            }
            else
            {
                _error = result.ErrorMessage ?? "Process execution failed";
                _isExecuting = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _error = $"Failed to start execution: {ex.Message}";
            _isExecuting = false;
            StateHasChanged();
        }
    }

    private string FormatTimeSpan(TimeSpan timeSpan)
    {
        if (timeSpan.TotalHours >= 1)
            return $"{(int)timeSpan.TotalHours}h {timeSpan.Minutes}m";
        else
            return $"{timeSpan.Minutes}m {timeSpan.Seconds}s";
    }

    private async Task PauseExecution()
    {
        // TODO: Implement pause functionality
        _isExecuting = false;
        StateHasChanged();
    }

    private async Task CancelExecution()
    {
        // TODO: Implement cancel functionality
        _isExecuting = false;
        StateHasChanged();
    }

    private async Task ViewResults()
    {
        Navigation.NavigateTo($"/journeys/{JourneyId}/results");
    }

    private async Task DownloadResults()
    {
        // TODO: Implement CSV download
        await JSRuntime.InvokeVoidAsync("alert", "Download feature coming soon!");
    }

    private void NavigateToConfiguration()
    {
        Navigation.NavigateTo($"/journeys/{JourneyId}/configure");
    }

    private void NavigateToDocuments()
    {
        Navigation.NavigateTo("/documents");
    }

    public class FrameworkSummary
    {
        public List<string> Questions { get; set; } = new();
        public int QuestionCount { get; set; }
        public double RelevanceThreshold { get; set; }
        public double ContributionThreshold { get; set; }
    }
}