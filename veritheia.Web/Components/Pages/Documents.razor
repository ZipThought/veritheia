@page "/documents"
@using veritheia.Web.Services
@using Veritheia.Data.DTOs
@using Veritheia.Common.Models
@using System.Text
@inject AuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Documents - Veritheia</PageTitle>

<div class="documents-page">
    <div class="page-header">
        <h1>Document Library</h1>
        <p>Upload and manage documents for your journeys</p>
    </div>

    @if (_loading)
    {
        <div class="loading">
            <div class="loading-spinner"></div>
            <p>Loading documents...</p>
        </div>
    }
    else if (_error != null)
    {
        <div class="error-state">
            <h3>Error Loading Documents</h3>
            <p>@_error</p>
            <button class="btn btn-primary" @onclick="LoadDocuments">Retry</button>
        </div>
    }
    else
    {
        <div class="upload-section">
            <div class="upload-card">
                <h3>Upload CSV Dataset</h3>
                <p>Upload a CSV file containing research papers for systematic screening.</p>
                
                <div class="upload-form">
                    <div class="form-group">
                        <label for="csvFile">Select CSV File</label>
                        <InputFile OnChange="@HandleFileSelection" accept=".csv" class="file-input" />
                        @if (_selectedFile != null)
                        {
                            <div class="file-info">
                                <span class="file-name">ðŸ“„ @_selectedFile.Name</span>
                                <span class="file-size">(@(_selectedFile.Size / 1024)KB)</span>
                            </div>
                        }
                    </div>
                    
                    <div class="form-group">
                        <label for="description">Description (Optional)</label>
                        <textarea @bind="_description" placeholder="Describe this dataset..." rows="3" class="form-control"></textarea>
                    </div>
                    
                    <button class="btn btn-primary" @onclick="UploadFile" disabled="@(_selectedFile == null || _uploading)">
                        @if (_uploading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                            <span>Uploading...</span>
                        }
                        else
                        {
                            <span>Upload Dataset</span>
                        }
                    </button>
                </div>
            </div>
        </div>

        @if (_uploadedDatasets.Any())
        {
            <div class="datasets-section">
                <h3>Uploaded Datasets</h3>
                <div class="datasets-grid">
                    @foreach (var dataset in _uploadedDatasets)
                    {
                        <div class="dataset-card">
                            <div class="dataset-header">
                                <h4>@dataset.Name</h4>
                                <span class="dataset-size">@dataset.DocumentCount documents</span>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(dataset.Description))
                            {
                                <p class="dataset-description">@dataset.Description</p>
                            }
                            
                            <div class="dataset-meta">
                                <span class="upload-date">Uploaded @GetRelativeTime(dataset.UploadedAt)</span>
                            </div>
                            
                            <div class="dataset-actions">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => PreviewDataset(dataset.Id)">
                                    Preview
                                </button>
                                <button class="btn btn-sm btn-primary" @onclick="() => UseDatasetForJourney(dataset.Id)">
                                    Use for Journey
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>

<style>
.documents-page {
    padding: 2rem;
    max-width: 1200px;
    margin: 0 auto;
}

.page-header {
    margin-bottom: 2rem;
}

.page-header h1 {
    font-size: 2rem;
    margin-bottom: 0.5rem;
}

.upload-section {
    margin-bottom: 3rem;
}

.upload-card {
    background: white;
    border-radius: 0.5rem;
    padding: 2rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.upload-card h3 {
    margin-bottom: 0.5rem;
}

.upload-form {
    margin-top: 1.5rem;
}

.form-group {
    margin-bottom: 1rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
}

.file-input {
    width: 100%;
    padding: 0.5rem;
    border: 2px dashed #ddd;
    border-radius: 0.25rem;
    background: #f9f9f9;
}

.file-info {
    margin-top: 0.5rem;
    padding: 0.5rem;
    background: #f0f7ff;
    border-radius: 0.25rem;
    font-size: 0.9rem;
}

.file-name {
    font-weight: 500;
}

.file-size {
    color: #666;
    margin-left: 0.5rem;
}

.form-control {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 0.25rem;
    font-family: inherit;
}

.datasets-section {
    margin-top: 3rem;
}

.datasets-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
}

.dataset-card {
    background: white;
    border-radius: 0.5rem;
    padding: 1.5rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.dataset-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
}

.dataset-header h4 {
    margin: 0;
    font-size: 1.1rem;
}

.dataset-size {
    background: #e3f2fd;
    color: #1976d2;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.8rem;
    font-weight: 500;
}

.dataset-description {
    color: #666;
    margin-bottom: 1rem;
    font-size: 0.9rem;
}

.dataset-meta {
    margin-bottom: 1rem;
    font-size: 0.8rem;
    color: #888;
}

.dataset-actions {
    display: flex;
    gap: 0.5rem;
}

.btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s;
}

.btn-primary {
    background: #1976d2;
    color: white;
}

.btn-primary:hover {
    background: #1565c0;
}

.btn-primary:disabled {
    background: #ccc;
    cursor: not-allowed;
}

.btn-outline-primary {
    background: transparent;
    color: #1976d2;
    border: 1px solid #1976d2;
}

.btn-outline-primary:hover {
    background: #1976d2;
    color: white;
}

.btn-sm {
    padding: 0.375rem 0.75rem;
    font-size: 0.875rem;
}

.loading {
    text-align: center;
    padding: 3rem;
}

.loading-spinner {
    width: 2rem;
    height: 2rem;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #1976d2;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
}

@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.error-state {
    text-align: center;
    padding: 3rem;
    background: #fff3f3;
    border-radius: 0.5rem;
}

.spinner-border {
    width: 1rem;
    height: 1rem;
    border: 2px solid currentColor;
    border-right-color: transparent;
    border-radius: 50%;
    animation: spin 0.75s linear infinite;
}

.spinner-border-sm {
    width: 0.875rem;
    height: 0.875rem;
    border-width: 2px;
}
</style>

@code {
    private UserIdentity? _currentUser;
    private bool _loading = true;
    private string? _error;
    private IBrowserFile? _selectedFile;
    private string _description = "";
    private bool _uploading = false;
    private List<DatasetInfo> _uploadedDatasets = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDocuments();
    }

    private async Task LoadDocuments()
    {
        _loading = true;
        _error = null;
        StateHasChanged();

        try
        {
            _currentUser = await AuthService.GetCurrentUserAsync();
            if (_currentUser == null)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            // Load user's uploaded datasets
            // TODO: Implement DocumentService to load actual datasets
            _uploadedDatasets = new List<DatasetInfo>(); // Placeholder
        }
        catch (Exception ex)
        {
            _error = $"Failed to load documents: {ex.Message}";
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        _selectedFile = e.File;
        StateHasChanged();
    }

    private async Task UploadFile()
    {
        if (_selectedFile == null || _currentUser == null)
            return;

        _uploading = true;
        _error = null;
        StateHasChanged();

        try
        {
            // Read file content
            var buffer = new byte[_selectedFile.Size];
            await _selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024) // 10MB limit
                .ReadAsync(buffer);

            var csvContent = Encoding.UTF8.GetString(buffer);

            // TODO: Process and store the CSV data
            // This should parse the CSV, extract articles, and store them in the database
            // For now, we'll create a placeholder dataset
            
            var newDataset = new DatasetInfo
            {
                Id = Guid.NewGuid(),
                Name = _selectedFile.Name,
                Description = _description,
                DocumentCount = EstimateDocumentCount(csvContent),
                UploadedAt = DateTime.UtcNow
            };

            _uploadedDatasets.Add(newDataset);

            // Reset form
            _selectedFile = null;
            _description = "";

            // TODO: Show success message
        }
        catch (Exception ex)
        {
            _error = $"Failed to upload file: {ex.Message}";
        }
        finally
        {
            _uploading = false;
            StateHasChanged();
        }
    }

    private int EstimateDocumentCount(string csvContent)
    {
        // Simple line count estimation (subtract header)
        var lines = csvContent.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        return Math.Max(0, lines.Length - 1);
    }

    private async Task PreviewDataset(Guid datasetId)
    {
        // TODO: Implement dataset preview
        Navigation.NavigateTo($"/documents/{datasetId}/preview");
    }

    private async Task UseDatasetForJourney(Guid datasetId)
    {
        // Navigate to journey creation with dataset pre-selected
        Navigation.NavigateTo($"/journeys/create?datasetId={datasetId}");
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;
        return timeSpan.TotalDays >= 1 ? $"{(int)timeSpan.TotalDays} day{(timeSpan.TotalDays >= 2 ? "s" : "")} ago"
             : timeSpan.TotalHours >= 1 ? $"{(int)timeSpan.TotalHours} hour{(timeSpan.TotalHours >= 2 ? "s" : "")} ago"
             : $"{(int)timeSpan.TotalMinutes} minute{(timeSpan.TotalMinutes >= 2 ? "s" : "")} ago";
    }

    public class DatasetInfo
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public int DocumentCount { get; set; }
        public DateTime UploadedAt { get; set; }
    }
}