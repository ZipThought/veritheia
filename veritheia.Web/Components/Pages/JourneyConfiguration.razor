@page "/journeys/{journeyId:guid}/configure"
@using veritheia.Web.Services
@using Veritheia.Data.DTOs
@using Veritheia.Common.Models
@inject JourneyApiService JourneyService
@inject AuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Configure Journey - Veritheia</PageTitle>

<div class="journey-config-page">
    @if (_loading)
    {
        <div class="loading">
            <div class="loading-spinner"></div>
            <p>Loading journey configuration...</p>
        </div>
    }
    else if (_error != null)
    {
        <div class="error-state">
            <h3>Error</h3>
            <p>@_error</p>
            <button class="btn btn-primary" @onclick="LoadJourney">Retry</button>
        </div>
    }
    else if (_journey != null)
    {
        <div class="config-header">
            <h1>Configure Journey Framework</h1>
            <p>Define your intellectual framework for: <strong>@_journey.Purpose</strong></p>
        </div>

        <div class="config-sections">
            @if (_journey.ProcessType == "systematic-screening" || _journey.ProcessType == "SystematicScreeningProcess")
            {
                <div class="research-framework-section">
                    <h2>Research Framework</h2>
                    <p>Define the systematic screening criteria for literature review</p>

                    <div class="framework-card">
                        <h3>Research Questions</h3>
                        <p>Define the core questions that guide your literature review. Each paper will be assessed against these questions.</p>
                        
                        <div class="questions-editor">
                            @for (int i = 0; i < _researchQuestions.Count; i++)
                            {
                                var index = i; // Capture for closure
                                <div class="question-item">
                                    <div class="question-header">
                                        <label>Question @(index + 1)</label>
                                        @if (_researchQuestions.Count > 1)
                                        {
                                            <button type="button" class="btn-remove" @onclick="() => RemoveQuestion(index)">×</button>
                                        }
                                    </div>
                                    <textarea @bind="_researchQuestions[index]" 
                                             placeholder="e.g., How are large language models being utilized for cybersecurity threat detection?"
                                             rows="2"
                                             class="form-control"></textarea>
                                </div>
                            }
                            
                            <button type="button" class="btn btn-outline-primary" @onclick="AddQuestion">
                                + Add Research Question
                            </button>
                        </div>
                    </div>

                    <div class="framework-card">
                        <h3>Term Definitions</h3>
                        <p>Define key terms and concepts to ensure consistent interpretation across papers.</p>
                        
                        <div class="definitions-editor">
                            @foreach (var definition in _termDefinitions)
                            {
                                <div class="definition-item">
                                    <div class="definition-header">
                                        <input @bind="definition.Term" placeholder="Term" class="term-input" />
                                        <button type="button" class="btn-remove" @onclick="() => RemoveDefinition(definition)">×</button>
                                    </div>
                                    <textarea @bind="definition.Definition" 
                                             placeholder="Define what this term means in the context of your research..."
                                             rows="2"
                                             class="form-control"></textarea>
                                </div>
                            }
                            
                            <button type="button" class="btn btn-outline-primary" @onclick="AddDefinition">
                                + Add Term Definition
                            </button>
                        </div>
                    </div>

                    <div class="framework-card">
                        <h3>Assessment Criteria</h3>
                        <p>Define how papers should be evaluated for relevance and contribution.</p>
                        
                        <div class="criteria-editor">
                            <div class="criteria-section">
                                <h4>Relevance Threshold</h4>
                                <p>What score (0.0-1.0) should a paper achieve to be considered relevant?</p>
                                <input type="number" @bind="_relevanceThreshold" min="0" max="1" step="0.1" class="form-control threshold-input" />
                            </div>
                            
                            <div class="criteria-section">
                                <h4>Contribution Threshold</h4>
                                <p>What score (0.0-1.0) should a paper achieve to be considered a direct contribution?</p>
                                <input type="number" @bind="_contributionThreshold" min="0" max="1" step="0.1" class="form-control threshold-input" />
                            </div>
                            
                            <div class="criteria-section">
                                <h4>Assessment Instructions</h4>
                                <p>Additional instructions for how papers should be evaluated.</p>
                                <textarea @bind="_assessmentInstructions" 
                                         placeholder="e.g., Focus on empirical studies with quantitative results. Exclude purely theoretical papers without experimental validation."
                                         rows="3"
                                         class="form-control"></textarea>
                            </div>
                        </div>
                    </div>

                    <div class="framework-card">
                        <h3>Theoretical Orientation</h3>
                        <p>Describe your theoretical perspective and any bias you want to acknowledge.</p>
                        
                        <textarea @bind="_theoreticalOrientation" 
                                 placeholder="e.g., Post-industrial computing perspective emphasizing human-AI collaboration..."
                                 rows="4"
                                 class="form-control"></textarea>
                    </div>
                </div>
            }
            else if (_journey.ProcessType == "basic-constrained-composition" || _journey.ProcessType == "ConstrainedCompositionProcess")
            {
                <div class="pedagogical-framework-section">
                    <h2>Pedagogical Framework</h2>
                    <p>Define the learning objectives and assessment criteria for student work</p>

                    <div class="framework-card">
                        <h3>Learning Objectives</h3>
                        <p>What should students demonstrate through their writing?</p>
                        
                        <textarea @bind="_learningObjectives" 
                                 placeholder="e.g., Students demonstrate descriptive language using sensory details and grade-appropriate vocabulary..."
                                 rows="3"
                                 class="form-control"></textarea>
                    </div>

                    <div class="framework-card">
                        <h3>Assessment Rubric</h3>
                        <p>Define the scoring criteria for student responses.</p>
                        
                        <textarea @bind="_assessmentRubric" 
                                 placeholder="e.g., 4 points = proper length (50-100 words) + grade-level vocabulary + 3+ sensory details + clear topic focus..."
                                 rows="4"
                                 class="form-control"></textarea>
                    </div>

                    <div class="framework-card">
                        <h3>Safety Constraints</h3>
                        <p>Define what content is appropriate and what should be flagged.</p>
                        
                        <textarea @bind="_safetyConstraints" 
                                 placeholder="e.g., School-appropriate vocabulary, no inappropriate topics, no violence..."
                                 rows="3"
                                 class="form-control"></textarea>
                    </div>
                </div>
            }

            <div class="action-section">
                <button class="btn btn-outline-secondary" @onclick="SaveDraft">Save as Draft</button>
                <button class="btn btn-primary" @onclick="SaveAndContinue" disabled="@(!IsFrameworkValid())">
                    Save Framework & Continue
                </button>
            </div>
        </div>
    }
</div>

<style>
.journey-config-page {
    padding: 2rem;
    max-width: 1000px;
    margin: 0 auto;
}

.config-header {
    margin-bottom: 2rem;
    text-align: center;
}

.config-header h1 {
    font-size: 2rem;
    margin-bottom: 0.5rem;
}

.config-sections {
    display: flex;
    flex-direction: column;
    gap: 2rem;
}

.framework-card {
    background: white;
    border-radius: 0.5rem;
    padding: 1.5rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 1.5rem;
}

.framework-card h3 {
    margin-bottom: 0.5rem;
    color: #1976d2;
}

.framework-card h4 {
    margin-bottom: 0.5rem;
    font-size: 1rem;
}

.questions-editor, .definitions-editor, .criteria-editor {
    margin-top: 1rem;
}

.question-item, .definition-item {
    margin-bottom: 1rem;
    padding: 1rem;
    background: #f9f9f9;
    border-radius: 0.25rem;
}

.question-header, .definition-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
}

.question-header label {
    font-weight: 500;
}

.btn-remove {
    background: #ff4444;
    color: white;
    border: none;
    border-radius: 50%;
    width: 1.5rem;
    height: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 1rem;
    line-height: 1;
}

.btn-remove:hover {
    background: #cc0000;
}

.term-input {
    flex: 0 0 200px;
    padding: 0.25rem 0.5rem;
    border: 1px solid #ddd;
    border-radius: 0.25rem;
    font-weight: 500;
}

.criteria-section {
    margin-bottom: 1.5rem;
}

.threshold-input {
    max-width: 150px;
}

.form-control {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 0.25rem;
    font-family: inherit;
    resize: vertical;
}

.action-section {
    display: flex;
    justify-content: center;
    gap: 1rem;
    padding: 2rem 0;
}

.btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s;
}

.btn-primary {
    background: #1976d2;
    color: white;
}

.btn-primary:hover {
    background: #1565c0;
}

.btn-primary:disabled {
    background: #ccc;
    cursor: not-allowed;
}

.btn-outline-primary {
    background: transparent;
    color: #1976d2;
    border: 1px solid #1976d2;
}

.btn-outline-primary:hover {
    background: #1976d2;
    color: white;
}

.btn-outline-secondary {
    background: transparent;
    color: #666;
    border: 1px solid #666;
}

.btn-outline-secondary:hover {
    background: #666;
    color: white;
}

.loading {
    text-align: center;
    padding: 3rem;
}

.loading-spinner {
    width: 2rem;
    height: 2rem;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #1976d2;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
}

@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.error-state {
    text-align: center;
    padding: 3rem;
    background: #fff3f3;
    border-radius: 0.5rem;
}
</style>

@code {
    [Parameter] public Guid JourneyId { get; set; }
    
    private JourneyDto? _journey;
    private UserIdentity? _currentUser;
    private bool _loading = true;
    private string? _error;

    // Research Framework fields
    private List<string> _researchQuestions = new() { "" };
    private List<TermDefinitionItem> _termDefinitions = new();
    private double _relevanceThreshold = 0.7;
    private double _contributionThreshold = 0.7;
    private string _assessmentInstructions = "";
    private string _theoreticalOrientation = "";

    // Pedagogical Framework fields
    private string _learningObjectives = "";
    private string _assessmentRubric = "";
    private string _safetyConstraints = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadJourney();
    }

    private async Task LoadJourney()
    {
        _loading = true;
        _error = null;
        StateHasChanged();

        try
        {
            _currentUser = await AuthService.GetCurrentUserAsync();
            if (_currentUser == null)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            _journey = await JourneyService.GetJourneyAsync(_currentUser.Id, JourneyId);
            if (_journey == null)
            {
                _error = "Journey not found";
                return;
            }

            // Load existing framework if available
            LoadExistingFramework();
        }
        catch (Exception ex)
        {
            _error = $"Failed to load journey: {ex.Message}";
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void LoadExistingFramework()
    {
        // TODO: Load existing framework from JourneyFramework entity
        // For now, initialize with defaults
        if (_termDefinitions.Count == 0)
        {
            _termDefinitions.Add(new TermDefinitionItem { Term = "", Definition = "" });
        }
    }

    private void AddQuestion()
    {
        _researchQuestions.Add("");
        StateHasChanged();
    }

    private void RemoveQuestion(int index)
    {
        if (_researchQuestions.Count > 1)
        {
            _researchQuestions.RemoveAt(index);
            StateHasChanged();
        }
    }

    private void AddDefinition()
    {
        _termDefinitions.Add(new TermDefinitionItem { Term = "", Definition = "" });
        StateHasChanged();
    }

    private void RemoveDefinition(TermDefinitionItem definition)
    {
        _termDefinitions.Remove(definition);
        if (_termDefinitions.Count == 0)
        {
            _termDefinitions.Add(new TermDefinitionItem { Term = "", Definition = "" });
        }
        StateHasChanged();
    }

    private bool IsFrameworkValid()
    {
        if (_journey?.ProcessType == "systematic-screening" || _journey?.ProcessType == "SystematicScreeningProcess")
        {
            return _researchQuestions.Any(q => !string.IsNullOrWhiteSpace(q));
        }
        else if (_journey?.ProcessType == "basic-constrained-composition" || _journey?.ProcessType == "ConstrainedCompositionProcess")
        {
            return !string.IsNullOrWhiteSpace(_learningObjectives) && 
                   !string.IsNullOrWhiteSpace(_assessmentRubric);
        }
        
        return false;
    }

    private async Task SaveDraft()
    {
        // TODO: Save framework as draft
        await SaveFramework(false);
    }

    private async Task SaveAndContinue()
    {
        if (await SaveFramework(true))
        {
            // Navigate to process execution page
            Navigation.NavigateTo($"/journeys/{JourneyId}/process");
        }
    }

    private async Task<bool> SaveFramework(bool markComplete)
    {
        try
        {
            if (_currentUser == null || _journey == null)
                return false;

            // Create framework data structure
            var frameworkData = new Dictionary<string, object>();

            if (_journey.ProcessType == "systematic-screening" || _journey.ProcessType == "SystematicScreeningProcess")
            {
                frameworkData["research_questions"] = _researchQuestions.Where(q => !string.IsNullOrWhiteSpace(q)).ToList();
                frameworkData["term_definitions"] = _termDefinitions.Where(td => !string.IsNullOrWhiteSpace(td.Term)).ToList();
                frameworkData["relevance_threshold"] = _relevanceThreshold;
                frameworkData["contribution_threshold"] = _contributionThreshold;
                frameworkData["assessment_instructions"] = _assessmentInstructions;
                frameworkData["theoretical_orientation"] = _theoreticalOrientation;
            }
            else if (_journey.ProcessType == "basic-constrained-composition" || _journey.ProcessType == "ConstrainedCompositionProcess")
            {
                frameworkData["learning_objectives"] = _learningObjectives;
                frameworkData["assessment_rubric"] = _assessmentRubric;
                frameworkData["safety_constraints"] = _safetyConstraints;
            }

            // Update journey context with framework data
            await JourneyService.UpdateJourneyAsync(
                _currentUser.Id, 
                JourneyId, 
                markComplete ? "Configured" : "Draft",
                frameworkData);

            return true;
        }
        catch (Exception ex)
        {
            _error = $"Failed to save framework: {ex.Message}";
            StateHasChanged();
            return false;
        }
    }

    public class TermDefinitionItem
    {
        public string Term { get; set; } = "";
        public string Definition { get; set; } = "";
    }
}